// ################################################################################
// #
// # File:        G:/bin/p530/src/asc2/idl\ascagent_soap_tie.hh (the SOAP TIE Header file)
// # Description: Harmonizes TIE implementation classes in a Multi-ORB environment
// #
// # This file has been generated by the SOAP generator on 15 Nov 2013.
// # Do not delete it or edit it since changes will be 
// # lost when next generation happens.
// #
// ################################################################################

#ifndef _SCS_ASCAGENT_SOAP_TIE_HH_
#define _SCS_ASCAGENT_SOAP_TIE_HH_

#include <ascagent_soap.hh>

template<class T_SOAP> class AscAgentSOAP_TIE : public AscAgentSOAP {

 public:

   // ctor
   AscAgentSOAP_TIE(T_SOAP * objp) : AscAgentSOAP(), m_obj(objp), m_rel(1) {
   }

   // dtor
   virtual ~AscAgentSOAP_TIE() {
     if(m_rel) delete m_obj;
   }

   char * scs_implementation(void)
     throw(CORBA::SystemException) {
     return m_obj->scs_implementation();
   }
   char * scs_host(void)
     throw(CORBA::SystemException) {
     return m_obj->scs_host();
   }
   void   isAlive(void)
     throw(CORBA::SystemException) {
     m_obj->isAlive();
   }

   static AscAgentIdl_ptr _narrow(CORBA::Object_ptr p) {
     return AscAgentIdl::_narrow(p);
   }

   // IDL operations

   virtual ScsStatusIdl subscribe()
     throw(CORBA::SystemException) {
     return m_obj->subscribe();
   }

   virtual ScsStatusIdl getState(const char * procName, 
                                 String_out state)
     throw(CORBA::SystemException) {
     return m_obj->getState(procName, 
                            state);
   }

   virtual ScsStatusIdl getRemoteState(const char * procName, 
                                       String_out state)
     throw(CORBA::SystemException) {
     return m_obj->getRemoteState(procName, 
                                  state);
   }

   virtual ScsStatusIdl setState(const char * procName, 
                                 const char * state)
     throw(CORBA::SystemException) {
     return m_obj->setState(procName, 
                            state);
   }

   virtual ScsStatusIdl specifyState(const char * procName, 
                                     const char * state)
     throw(CORBA::SystemException) {
     return m_obj->specifyState(procName, 
                                state);
   }

   virtual ScsStatusIdl startProcessInfo(String_out processName, 
                                         Short_out phase, 
                                         Short_out nbprocesstostart)
     throw(CORBA::SystemException) {
     return m_obj->startProcessInfo(processName, 
                                    phase, 
                                    nbprocesstostart);
   }

   virtual ScsStatusIdl runCmd(const char * serverName, 
                               const char * terminate, 
                               const char * notification, 
                               const char * supervisionType, 
                               const char * priority, 
                               const char * snapshot, 
                               const char * command)
     throw(CORBA::SystemException) {
     return m_obj->runCmd(serverName, 
                          terminate, 
                          notification, 
                          supervisionType, 
                          priority, 
                          snapshot, 
                          command);
   }

   virtual ScsStatusIdl runCommand(const char * serverName, 
                                   const char * command)
     throw(CORBA::SystemException) {
     return m_obj->runCommand(serverName, 
                              command);
   }

   virtual ScsStatusIdl synchroniseStandby()
     throw(CORBA::SystemException) {
     return m_obj->synchroniseStandby();
   }

   virtual ScsStatusIdl switchover()
     throw(CORBA::SystemException) {
     return m_obj->switchover();
   }

   virtual ScsStatusIdl getSnapshot(AscAgentIdl_ptr  standby)
     throw(CORBA::SystemException) {
     return m_obj->getSnapshot(standby);
   }

   virtual ScsStatusIdl forceSnapshot()
     throw(CORBA::SystemException) {
     return m_obj->forceSnapshot();
   }

   virtual ScsStatusIdl forceSnapshotIn(const char * path)
     throw(CORBA::SystemException) {
     return m_obj->forceSnapshotIn(path);
   }

   virtual ScsStatusIdl forceSnapshotWithStatus(const char * path, 
                                                AscIdl_ptr  fromServer)
     throw(CORBA::SystemException) {
     return m_obj->forceSnapshotWithStatus(path, 
                                           fromServer);
   }

   virtual void snapshotCompleted(const char * remoteSnapShotPath)
     throw(CORBA::SystemException) {
     m_obj->snapshotCompleted(remoteSnapShotPath);
   }

   virtual void endSnapshotCompleted(CORBA::Boolean successful)
     throw(CORBA::SystemException) {
     m_obj->endSnapshotCompleted(successful);
   }

   virtual ScsStatusIdl foregroundSnapshot()
     throw(CORBA::SystemException) {
     return m_obj->foregroundSnapshot();
   }

   virtual ScsStatusIdl endBackgroundSnapshot(const ScsStatusIdl& snapshotStatus)
     throw(CORBA::SystemException) {
     return m_obj->endBackgroundSnapshot(snapshotStatus);
   }

   virtual void foregroundSnapshotReply(const ScsMessageTag& ascAgentTag, 
                                        const ScsStatusIdl& result)
     throw(CORBA::SystemException) {
     m_obj->foregroundSnapshotReply(ascAgentTag, 
                                    result);
   }

   virtual ScsStatusIdl testWatchdog(Short_out state)
     throw(CORBA::SystemException) {
     return m_obj->testWatchdog(state);
   }

   virtual ScsStatusIdl getWatchdogLastLifeTime(ScsTimeValIdl_out lasttime)
     throw(CORBA::SystemException) {
     return m_obj->getWatchdogLastLifeTime(lasttime);
   }

   virtual ScsStatusIdl getWatchdogMode(Short_out mode)
     throw(CORBA::SystemException) {
     return m_obj->getWatchdogMode(mode);
   }

   virtual ScsStatusIdl getNet1SendState(Short_out state)
     throw(CORBA::SystemException) {
     return m_obj->getNet1SendState(state);
   }

   virtual ScsStatusIdl getLastNet1SendStateTime(ScsTimeValIdl_out lasttime)
     throw(CORBA::SystemException) {
     return m_obj->getLastNet1SendStateTime(lasttime);
   }

   virtual ScsStatusIdl getNet1RecvState(Short_out state)
     throw(CORBA::SystemException) {
     return m_obj->getNet1RecvState(state);
   }

   virtual ScsStatusIdl getLastNet1RecvStateTime(ScsTimeValIdl_out lasttime)
     throw(CORBA::SystemException) {
     return m_obj->getLastNet1RecvStateTime(lasttime);
   }

   virtual ScsStatusIdl getNet2SendState(Short_out state)
     throw(CORBA::SystemException) {
     return m_obj->getNet2SendState(state);
   }

   virtual ScsStatusIdl getLastNet2SendStateTime(ScsTimeValIdl_out lasttime)
     throw(CORBA::SystemException) {
     return m_obj->getLastNet2SendStateTime(lasttime);
   }

   virtual ScsStatusIdl getNet2RecvState(Short_out state)
     throw(CORBA::SystemException) {
     return m_obj->getNet2RecvState(state);
   }

   virtual ScsStatusIdl getLastNet2RecvStateTime(ScsTimeValIdl_out lasttime)
     throw(CORBA::SystemException) {
     return m_obj->getLastNet2RecvStateTime(lasttime);
   }

   virtual ScsStatusIdl getSerSendState(Short_out state)
     throw(CORBA::SystemException) {
     return m_obj->getSerSendState(state);
   }

   virtual ScsStatusIdl getLastSerSendStateTime(ScsTimeValIdl_out lasttime)
     throw(CORBA::SystemException) {
     return m_obj->getLastSerSendStateTime(lasttime);
   }

   virtual ScsStatusIdl getSerRecvState(Short_out state)
     throw(CORBA::SystemException) {
     return m_obj->getSerRecvState(state);
   }

   virtual ScsStatusIdl getLastSerRecvStateTime(ScsTimeValIdl_out lasttime)
     throw(CORBA::SystemException) {
     return m_obj->getLastSerRecvStateTime(lasttime);
   }

   virtual ScsStatusIdl getOSTime(ScsTimeValIdl_out ostime)
     throw(CORBA::SystemException) {
     return m_obj->getOSTime(ostime);
   }

   virtual ScsStatusIdl getRemoteOSTime(ScsTimeValIdl_out ostime)
     throw(CORBA::SystemException) {
     return m_obj->getRemoteOSTime(ostime);
   }

   virtual ScsStatusIdl getProcessInfos(ScsProcessInfosIdl & infos, 
                                        Short_out currentPhase)
     throw(CORBA::SystemException) {
     return m_obj->getProcessInfos(infos, 
                                   currentPhase);
   }

   virtual ScsStatusIdl getProcessArguments(const char * procName, 
                                            StringList_out args)
     throw(CORBA::SystemException) {
     return m_obj->getProcessArguments(procName, 
                                       args);
   }

   virtual ScsStatusIdl refreshEnvList()
     throw(CORBA::SystemException) {
     return m_obj->refreshEnvList();
   }

   virtual ScsStatusIdl authorizedExternalClientConnection()
     throw(CORBA::SystemException) {
     return m_obj->authorizedExternalClientConnection();
   }

   virtual ScsStatusIdl Shutdown()
     throw(CORBA::SystemException) {
     return m_obj->Shutdown();
   }



 private:

   T_SOAP * m_obj;
   CORBA::Boolean m_rel;

   AscAgentSOAP_TIE(const AscAgentSOAP_TIE<T_SOAP>&){}
   void operator=(const AscAgentSOAP_TIE<T_SOAP>&){}

};


#define DEF_TIE_SOAP_AscAgentIdl(X)\
   typedef AscAgentSOAP_TIE<X> AscAgentSOAP_TIE##X;

#define TIE_SOAP_AscAgentIdl(X) AscAgentSOAP_TIE##X

#endif
