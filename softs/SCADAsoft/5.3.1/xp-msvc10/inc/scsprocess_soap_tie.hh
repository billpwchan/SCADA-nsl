// ################################################################################
// #
// # File:        G:/bin/p530/src/scs/idl\scsprocess_soap_tie.hh (the SOAP TIE Header file)
// # Description: Harmonizes TIE implementation classes in a Multi-ORB environment
// #
// # This file has been generated by the SOAP generator on 16 Apr 2014.
// # Do not delete it or edit it since changes will be 
// # lost when next generation happens.
// #
// ################################################################################

#ifndef _SCS_SCSPROCESS_SOAP_TIE_HH_
#define _SCS_SCSPROCESS_SOAP_TIE_HH_

#include <scsprocess_soap.hh>

template<class T_SOAP> class ScsProcessSOAP_TIE : public ScsProcessSOAP {

 public:

   // ctor
   ScsProcessSOAP_TIE(T_SOAP * objp) : ScsProcessSOAP(), m_obj(objp), m_rel(1) {
   }

   // dtor
   virtual ~ScsProcessSOAP_TIE() {
     if(m_rel) delete m_obj;
   }

   char * scs_implementation(void)
     throw(CORBA::SystemException) {
     return m_obj->scs_implementation();
   }
   char * scs_host(void)
     throw(CORBA::SystemException) {
     return m_obj->scs_host();
   }
   void   isAlive(void)
     throw(CORBA::SystemException) {
     m_obj->isAlive();
   }

   static ScsProcessIdl_ptr _narrow(CORBA::Object_ptr p) {
     return ScsProcessIdl::_narrow(p);
   }

   // IDL operations

   virtual char* scs_implementation()
     throw(CORBA::SystemException) {
     return m_obj->scs_implementation();
   }

   virtual char* scs_host()
     throw(CORBA::SystemException) {
     return m_obj->scs_host();
   }

   virtual void isAlive()
     throw(CORBA::SystemException) {
     m_obj->isAlive();
   }



 private:

   T_SOAP * m_obj;
   CORBA::Boolean m_rel;

   ScsProcessSOAP_TIE(const ScsProcessSOAP_TIE<T_SOAP>&){}
   void operator=(const ScsProcessSOAP_TIE<T_SOAP>&){}

};


#define DEF_TIE_SOAP_ScsProcessIdl(X)\
   typedef ScsProcessSOAP_TIE<X> ScsProcessSOAP_TIE##X;

#define TIE_SOAP_ScsProcessIdl(X) ScsProcessSOAP_TIE##X

#endif
