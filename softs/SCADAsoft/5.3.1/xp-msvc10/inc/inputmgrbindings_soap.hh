// ################################################################################
// #
// # File:        G:/bin/p530/src/img/idl\inputmgrbindings_soap.hh (the SOAP header file)
// # Description: Harmonizes implementation code in a Multi-Object Adapter environment
// #
// # This file has been generated by the SOAP generator on 15 Nov 2013.
// # Do not delete it or edit it since changes will be 
// # lost when next generation happens.
// #
// ################################################################################

#ifndef _SCS_INPUTMGRBINDINGS_SOAP_H_
#define _SCS_INPUTMGRBINDINGS_SOAP_H_

#include <scadaorb.h>
#include <inputmgrbindings_skel.hh>


#include <inputmgrbindings_types.hh>

class InputMgrBindingsSOAP : virtual public CORBA_INHERIT(InputMgrBindingsIdl)
#ifdef _SCS_ORBACUS_
   , public virtual PortableServer::RefCountServantBase
#endif
{
 public:

   // The first instance of this class will be registerd in naming service as 'InputMgrBindingsIdl'
   //   Next objects will have a marker composed of numeric characters
   // The argument isMultithreaded is used to indicate whether the CORBA object is multithreaded or serialized
   InputMgrBindingsSOAP(CORBA::Boolean isMultithreaded = 0);


   // The argument marker is used to distinguish serveral instances of this class
   //   Each object will be registred in naming service as 'marker:InputMgrBindingsIdl'
   // The argument isMultithreaded is used to indicate whether the CORBA object is multithreaded or serialized
   InputMgrBindingsSOAP(const char* marker, CORBA::Boolean isMultithreaded = 0);


   InputMgrBindingsSOAP(PortableServer::POA_var & poa);

   ~InputMgrBindingsSOAP();

   char* scs_implementation() throw (CORBA::SystemException);

   char* scs_host() throw (CORBA::SystemException);

   void  isAlive() throw (CORBA::SystemException);

   CORBA::Boolean scs_is_multithreaded() {
     return _isMultithreaded;
   }

   virtual PortableServer::POA_ptr _default_POA() {
     PortableServer::POA_var foo=_myPoa;
     return foo._retn();
   }

   void _activate_servant();
   void _deactivate_servant();

 private:

   CORBA::Boolean          _isMultithreaded;
   PortableServer::POA_var _myPoa;
   char*                   _myName;
   CORBA::String_var       _objName;

};

#endif
