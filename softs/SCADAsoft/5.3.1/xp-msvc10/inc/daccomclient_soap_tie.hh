// ################################################################################
// #
// # File:        G:/bin/p530/src/dac/idl\daccomclient_soap_tie.hh (the SOAP TIE Header file)
// # Description: Harmonizes TIE implementation classes in a Multi-ORB environment
// #
// # This file has been generated by the SOAP generator on 15 Nov 2013.
// # Do not delete it or edit it since changes will be 
// # lost when next generation happens.
// #
// ################################################################################

#ifndef _SCS_DACCOMCLIENT_SOAP_TIE_HH_
#define _SCS_DACCOMCLIENT_SOAP_TIE_HH_

#include <daccomclient_soap.hh>

template<class T_SOAP> class DacComClientSOAP_TIE : public DacComClientSOAP {

 public:

   // ctor
   DacComClientSOAP_TIE(T_SOAP * objp) : DacComClientSOAP(), m_obj(objp), m_rel(1) {
   }

   // dtor
   virtual ~DacComClientSOAP_TIE() {
     if(m_rel) delete m_obj;
   }

   char * scs_implementation(void)
     throw(CORBA::SystemException) {
     return m_obj->scs_implementation();
   }
   char * scs_host(void)
     throw(CORBA::SystemException) {
     return m_obj->scs_host();
   }
   void   isAlive(void)
     throw(CORBA::SystemException) {
     m_obj->isAlive();
   }

   static DacComClientIdl_ptr _narrow(CORBA::Object_ptr p) {
     return DacComClientIdl::_narrow(p);
   }

   // IDL operations

   virtual void receiveEiv(CORBA::Long deviceId, 
                           CORBA::Long nbValues, 
                           const char * values)
     throw(CORBA::SystemException) {
     m_obj->receiveEiv(deviceId, 
                       nbValues, 
                       values);
   }

   virtual ScsStatusIdl getEiv(const StringList & variableNames, 
                               String_out variableValues)
     throw(CORBA::SystemException) {
     return m_obj->getEiv(variableNames, 
                          variableValues);
   }

   virtual ScsStatusIdl getEov(const StringList & variableNames, 
                               String_out variableValues)
     throw(CORBA::SystemException) {
     return m_obj->getEov(variableNames, 
                          variableValues);
   }



 private:

   T_SOAP * m_obj;
   CORBA::Boolean m_rel;

   DacComClientSOAP_TIE(const DacComClientSOAP_TIE<T_SOAP>&){}
   void operator=(const DacComClientSOAP_TIE<T_SOAP>&){}

};


#define DEF_TIE_SOAP_DacComClientIdl(X)\
   typedef DacComClientSOAP_TIE<X> DacComClientSOAP_TIE##X;

#define TIE_SOAP_DacComClientIdl(X) DacComClientSOAP_TIE##X

#endif
