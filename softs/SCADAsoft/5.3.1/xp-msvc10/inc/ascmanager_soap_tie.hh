// ################################################################################
// #
// # File:        G:/bin/p530/src/asc2/idl\ascmanager_soap_tie.hh (the SOAP TIE Header file)
// # Description: Harmonizes TIE implementation classes in a Multi-ORB environment
// #
// # This file has been generated by the SOAP generator on 15 Nov 2013.
// # Do not delete it or edit it since changes will be 
// # lost when next generation happens.
// #
// ################################################################################

#ifndef _SCS_ASCMANAGER_SOAP_TIE_HH_
#define _SCS_ASCMANAGER_SOAP_TIE_HH_

#include <ascmanager_soap.hh>

template<class T_SOAP> class AscManagerSOAP_TIE : public AscManagerSOAP {

 public:

   // ctor
   AscManagerSOAP_TIE(T_SOAP * objp) : AscManagerSOAP(), m_obj(objp), m_rel(1) {
   }

   // dtor
   virtual ~AscManagerSOAP_TIE() {
     if(m_rel) delete m_obj;
   }

   char * scs_implementation(void)
     throw(CORBA::SystemException) {
     return m_obj->scs_implementation();
   }
   char * scs_host(void)
     throw(CORBA::SystemException) {
     return m_obj->scs_host();
   }
   void   isAlive(void)
     throw(CORBA::SystemException) {
     m_obj->isAlive();
   }

   static AscManagerIdl_ptr _narrow(CORBA::Object_ptr p) {
     return AscManagerIdl::_narrow(p);
   }

   // IDL operations

   virtual ScsStatusIdl getMode(ScsTimeValIdl_out time, 
                                String_out mode)
     throw(CORBA::SystemException) {
     return m_obj->getMode(time, 
                           mode);
   }

   virtual ScsStatusIdl getState(const char * envName, 
                                 const char * procName, 
                                 String_out state)
     throw(CORBA::SystemException) {
     return m_obj->getState(envName, 
                            procName, 
                            state);
   }

   virtual ScsStatusIdl setState(const char * physEnvName, 
                                 const char * procName, 
                                 const char * state)
     throw(CORBA::SystemException) {
     return m_obj->setState(physEnvName, 
                            procName, 
                            state);
   }

   virtual ScsStatusIdl getPhysState(const char * physEnvName, 
                                     const char * procName, 
                                     String_out state)
     throw(CORBA::SystemException) {
     return m_obj->getPhysState(physEnvName, 
                                procName, 
                                state);
   }

   virtual ScsStatusIdl subscribe(const char * envName)
     throw(CORBA::SystemException) {
     return m_obj->subscribe(envName);
   }

   virtual ScsStatusIdl getColumnName(const char * physEnvName, 
                                      String_out colName, 
                                      Short_out colMask)
     throw(CORBA::SystemException) {
     return m_obj->getColumnName(physEnvName, 
                                 colName, 
                                 colMask);
   }

   virtual ScsStatusIdl unsubscribe(const char * envName)
     throw(CORBA::SystemException) {
     return m_obj->unsubscribe(envName);
   }

   virtual ScsStatusIdl getAllStates(const char * envName, 
                                     String_out state)
     throw(CORBA::SystemException) {
     return m_obj->getAllStates(envName, 
                                state);
   }

   virtual ScsStatusIdl getHosts(const char * logicalEnvironmentName, 
                                 StringList_out hostNameList)
     throw(CORBA::SystemException) {
     return m_obj->getHosts(logicalEnvironmentName, 
                            hostNameList);
   }

   virtual ScsStatusIdl getEnvs(const char * logicalEnvironmentName, 
                                StringList_out envNameList)
     throw(CORBA::SystemException) {
     return m_obj->getEnvs(logicalEnvironmentName, 
                           envNameList);
   }

   virtual ScsStatusIdl getRedundancyType(const char * logicalEnvName, 
                                          UShort_out type)
     throw(CORBA::SystemException) {
     return m_obj->getRedundancyType(logicalEnvName, 
                                     type);
   }



 private:

   T_SOAP * m_obj;
   CORBA::Boolean m_rel;

   AscManagerSOAP_TIE(const AscManagerSOAP_TIE<T_SOAP>&){}
   void operator=(const AscManagerSOAP_TIE<T_SOAP>&){}

};


#define DEF_TIE_SOAP_AscManagerIdl(X)\
   typedef AscManagerSOAP_TIE<X> AscManagerSOAP_TIE##X;

#define TIE_SOAP_AscManagerIdl(X) AscManagerSOAP_TIE##X

#endif
