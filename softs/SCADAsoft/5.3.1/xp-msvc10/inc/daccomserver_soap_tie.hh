// ################################################################################
// #
// # File:        G:/bin/p530/src/dac/idl\daccomserver_soap_tie.hh (the SOAP TIE Header file)
// # Description: Harmonizes TIE implementation classes in a Multi-ORB environment
// #
// # This file has been generated by the SOAP generator on 15 Nov 2013.
// # Do not delete it or edit it since changes will be 
// # lost when next generation happens.
// #
// ################################################################################

#ifndef _SCS_DACCOMSERVER_SOAP_TIE_HH_
#define _SCS_DACCOMSERVER_SOAP_TIE_HH_

#include <daccomserver_soap.hh>

template<class T_SOAP> class DacComServerSOAP_TIE : public DacComServerSOAP {

 public:

   // ctor
   DacComServerSOAP_TIE(T_SOAP * objp) : DacComServerSOAP(), m_obj(objp), m_rel(1) {
   }

   // dtor
   virtual ~DacComServerSOAP_TIE() {
     if(m_rel) delete m_obj;
   }

   char * scs_implementation(void)
     throw(CORBA::SystemException) {
     return m_obj->scs_implementation();
   }
   char * scs_host(void)
     throw(CORBA::SystemException) {
     return m_obj->scs_host();
   }
   void   isAlive(void)
     throw(CORBA::SystemException) {
     m_obj->isAlive();
   }

   static DacComServerIdl_ptr _narrow(CORBA::Object_ptr p) {
     return DacComServerIdl::_narrow(p);
   }

   // IDL operations

   virtual ScsStatusIdl askForState()
     throw(CORBA::SystemException) {
     return m_obj->askForState();
   }

   virtual ScsStatusIdl armTimer()
     throw(CORBA::SystemException) {
     return m_obj->armTimer();
   }

   virtual ScsStatusIdl setFirstWakeUpTime(const ScsTimeValIdl& wakeupTime)
     throw(CORBA::SystemException) {
     return m_obj->setFirstWakeUpTime(wakeupTime);
   }

   virtual ScsStatusIdl getWakeUpTime(ScsTimeValIdl_out wakeupTime)
     throw(CORBA::SystemException) {
     return m_obj->getWakeUpTime(wakeupTime);
   }

   virtual ScsStatusIdl configure(DacComClientIdl_ptr  client, 
                                  const char * deviceName, 
                                  CORBA::Long deviceId, 
                                  CORBA::Long nbEiv, 
                                  const char * values)
     throw(CORBA::SystemException) {
     return m_obj->configure(client, 
                             deviceName, 
                             deviceId, 
                             nbEiv, 
                             values);
   }

   virtual void sendEov(CORBA::Long deviceId, 
                        CORBA::Long nbEov, 
                        const char * values)
     throw(CORBA::SystemException) {
     m_obj->sendEov(deviceId, 
                    nbEov, 
                    values);
   }

   virtual void shutdown()
     throw(CORBA::SystemException) {
     m_obj->shutdown();
   }



 private:

   T_SOAP * m_obj;
   CORBA::Boolean m_rel;

   DacComServerSOAP_TIE(const DacComServerSOAP_TIE<T_SOAP>&){}
   void operator=(const DacComServerSOAP_TIE<T_SOAP>&){}

};


#define DEF_TIE_SOAP_DacComServerIdl(X)\
   typedef DacComServerSOAP_TIE<X> DacComServerSOAP_TIE##X;

#define TIE_SOAP_DacComServerIdl(X) DacComServerSOAP_TIE##X

#endif
