// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler v1.6a_p10 ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
// and
//       Institute for Software Integrated Systems
//       Vanderbilt University
//       Nashville, TN
//       USA
//       http://www.isis.vanderbilt.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html

// TAO_IDL - Generated from
// be\be_codegen.cpp:487

#ifndef _TAO_IDL_G__BIN_P530_SRC_ASC2_IDL_ASCMANAGER_SKEL_H_
#define _TAO_IDL_G__BIN_P530_SRC_ASC2_IDL_ASCMANAGER_SKEL_H_


#include "ascmanager.hh"
#include "scsprocess_skel.hh"
#include "scsredtype_skel.hh"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */

#include "tao/Collocation_Proxy_Broker.h"
#include "tao/PortableServer/PortableServer.h"
#include "tao/PortableServer/Servant_Base.h"

// TAO_IDL - Generated from
// d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_interface/interface_sh.cpp:87

class POA_AscManagerIdl;
typedef POA_AscManagerIdl *POA_AscManagerIdl_ptr;

class _TAO_AscManagerIdl_Direct_Proxy_Impl;
class _TAO_AscManagerIdl_Strategized_Proxy_Broker;

class  POA_AscManagerIdl
  : public virtual POA_ScsProcessIdl
{
protected:
  POA_AscManagerIdl (void);

public:
  // Useful for template programming.
  typedef ::AscManagerIdl _stub_type;
  typedef ::AscManagerIdl_ptr _stub_ptr_type;
  typedef ::AscManagerIdl_var _stub_var_type;
  
  POA_AscManagerIdl (const POA_AscManagerIdl& rhs);
  virtual ~POA_AscManagerIdl (void);
  
  virtual ::CORBA::Boolean _is_a (const char* logical_type_id);
  
  static void _is_a_skel (
      TAO_ServerRequest & req,
      void * servant_upcall,
      void * servant
    );
  
  static void _non_existent_skel (
      TAO_ServerRequest & req,
      void * servant_upcall,
      void * servant
    );
  
  static void _interface_skel (
      TAO_ServerRequest & req,
      void * servant_upcall,
      void * servant
    );
  
  static void _component_skel (
      TAO_ServerRequest & req,
      void * servant_upcall,
      void * servant
    );
  
  static void _repository_id_skel (
      TAO_ServerRequest & req,
      void * servant_upcall,
      void * servant);
  
  virtual void _dispatch (
      TAO_ServerRequest & req,
      void * servant_upcall);
  
  ::AscManagerIdl *_this (void);
  
  virtual const char* _interface_repository_id (void) const;
  
  // TAO_IDL - Generated from
  // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/operation_sh.cpp:45
  
  virtual ::ScsStatusIdl getMode (
      ::ScsTimeValIdl_out time,
      ::CORBA::String_out mode) = 0;
  
  static void getMode_skel (
      TAO_ServerRequest & server_request,
      void * servant_upcall,
      void * servant
    );
  
  // TAO_IDL - Generated from
  // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/operation_sh.cpp:45
  
  virtual ::ScsStatusIdl getState (
      const char * envName,
      const char * procName,
      ::CORBA::String_out state) = 0;
  
  static void getState_skel (
      TAO_ServerRequest & server_request,
      void * servant_upcall,
      void * servant
    );
  
  // TAO_IDL - Generated from
  // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/operation_sh.cpp:45
  
  virtual ::ScsStatusIdl setState (
      const char * physEnvName,
      const char * procName,
      const char * state) = 0;
  
  static void setState_skel (
      TAO_ServerRequest & server_request,
      void * servant_upcall,
      void * servant
    );
  
  // TAO_IDL - Generated from
  // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/operation_sh.cpp:45
  
  virtual ::ScsStatusIdl getPhysState (
      const char * physEnvName,
      const char * procName,
      ::CORBA::String_out state) = 0;
  
  static void getPhysState_skel (
      TAO_ServerRequest & server_request,
      void * servant_upcall,
      void * servant
    );
  
  // TAO_IDL - Generated from
  // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/operation_sh.cpp:45
  
  virtual ::ScsStatusIdl subscribe (
      const char * envName) = 0;
  
  static void subscribe_skel (
      TAO_ServerRequest & server_request,
      void * servant_upcall,
      void * servant
    );
  
  // TAO_IDL - Generated from
  // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/operation_sh.cpp:45
  
  virtual ::ScsStatusIdl getColumnName (
      const char * physEnvName,
      ::CORBA::String_out colName,
      ::CORBA::Short_out colMask) = 0;
  
  static void getColumnName_skel (
      TAO_ServerRequest & server_request,
      void * servant_upcall,
      void * servant
    );
  
  // TAO_IDL - Generated from
  // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/operation_sh.cpp:45
  
  virtual ::ScsStatusIdl unsubscribe (
      const char * envName) = 0;
  
  static void unsubscribe_skel (
      TAO_ServerRequest & server_request,
      void * servant_upcall,
      void * servant
    );
  
  // TAO_IDL - Generated from
  // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/operation_sh.cpp:45
  
  virtual ::ScsStatusIdl getAllStates (
      const char * envName,
      ::CORBA::String_out state) = 0;
  
  static void getAllStates_skel (
      TAO_ServerRequest & server_request,
      void * servant_upcall,
      void * servant
    );
  
  // TAO_IDL - Generated from
  // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/operation_sh.cpp:45
  
  virtual ::ScsStatusIdl getHosts (
      const char * logicalEnvironmentName,
      ::StringList_out hostNameList) = 0;
  
  static void getHosts_skel (
      TAO_ServerRequest & server_request,
      void * servant_upcall,
      void * servant
    );
  
  // TAO_IDL - Generated from
  // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/operation_sh.cpp:45
  
  virtual ::ScsStatusIdl getEnvs (
      const char * logicalEnvironmentName,
      ::StringList_out envNameList) = 0;
  
  static void getEnvs_skel (
      TAO_ServerRequest & server_request,
      void * servant_upcall,
      void * servant
    );
  
  // TAO_IDL - Generated from
  // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/operation_sh.cpp:45
  
  virtual ::ScsStatusIdl getRedundancyType (
      const char * logicalEnvName,
      ::CORBA::UShort_out type) = 0;
  
  static void getRedundancyType_skel (
      TAO_ServerRequest & server_request,
      void * servant_upcall,
      void * servant
    );
  
  // TAO_IDL - Generated from
  // be\be_interface.cpp:2044
  
  static void
  scs_implementation_skel (
      TAO_ServerRequest & server_request, 
      void * servant_upcall,
      void * servant
    );
  
  // TAO_IDL - Generated from
  // be\be_interface.cpp:2044
  
  static void
  scs_host_skel (
      TAO_ServerRequest & server_request, 
      void * servant_upcall,
      void * servant
    );
  
  // TAO_IDL - Generated from
  // be\be_interface.cpp:2044
  
  static void
  isAlive_skel (
      TAO_ServerRequest & server_request, 
      void * servant_upcall,
      void * servant
    );
};

///////////////////////////////////////////////////////////////////////
//               Strategized Proxy Broker Declaration 
//

// TAO_IDL - Generated from
// d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_interface/strategized_proxy_broker_sh.cpp:36

class  _TAO_AscManagerIdl_Strategized_Proxy_Broker
  : public virtual TAO::Collocation_Proxy_Broker
{
public: 
  virtual ~_TAO_AscManagerIdl_Strategized_Proxy_Broker (void);
  
  TAO::Collocation_Strategy get_strategy (::CORBA::Object_ptr obj);
  
  void
  dispatch (
      ::CORBA::Object_ptr obj,
      ::CORBA::Object_out forward_obj,
      bool &is_forwarded,
      TAO::Argument ** args,
      int num_args,
      const char * op,
      size_t op_len,
      TAO::Collocation_Strategy strategy
    );
  
  static _TAO_AscManagerIdl_Strategized_Proxy_Broker *
  the_TAO_AscManagerIdl_Strategized_Proxy_Broker (void);
};

//
//            End Strategized Proxy Broker Declaration 
///////////////////////////////////////////////////////////////////////



// TAO_IDL - Generated from 
// d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_interface/direct_proxy_impl_sh.cpp:31

///////////////////////////////////////////////////////////////////////
//                    Direct  Impl. Declaration
//

class  _TAO_AscManagerIdl_Direct_Proxy_Impl
  : public virtual ::_TAO_ScsProcessIdl_Direct_Proxy_Impl
{
public:
  virtual ~_TAO_AscManagerIdl_Direct_Proxy_Impl (void);
  
  // TAO_IDL - Generated from
  // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/proxy_impl_xh.cpp:24
  
  static void
  getMode (
    TAO_Abstract_ServantBase *servant, TAO::Argument **args, int num_args);
  
  
  // TAO_IDL - Generated from
  // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/proxy_impl_xh.cpp:24
  
  static void
  getState (
    TAO_Abstract_ServantBase *servant, TAO::Argument **args, int num_args);
  
  
  // TAO_IDL - Generated from
  // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/proxy_impl_xh.cpp:24
  
  static void
  setState (
    TAO_Abstract_ServantBase *servant, TAO::Argument **args, int num_args);
  
  
  // TAO_IDL - Generated from
  // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/proxy_impl_xh.cpp:24
  
  static void
  getPhysState (
    TAO_Abstract_ServantBase *servant, TAO::Argument **args, int num_args);
  
  
  // TAO_IDL - Generated from
  // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/proxy_impl_xh.cpp:24
  
  static void
  subscribe (
    TAO_Abstract_ServantBase *servant, TAO::Argument **args, int num_args);
  
  
  // TAO_IDL - Generated from
  // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/proxy_impl_xh.cpp:24
  
  static void
  getColumnName (
    TAO_Abstract_ServantBase *servant, TAO::Argument **args, int num_args);
  
  
  // TAO_IDL - Generated from
  // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/proxy_impl_xh.cpp:24
  
  static void
  unsubscribe (
    TAO_Abstract_ServantBase *servant, TAO::Argument **args, int num_args);
  
  
  // TAO_IDL - Generated from
  // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/proxy_impl_xh.cpp:24
  
  static void
  getAllStates (
    TAO_Abstract_ServantBase *servant, TAO::Argument **args, int num_args);
  
  
  // TAO_IDL - Generated from
  // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/proxy_impl_xh.cpp:24
  
  static void
  getHosts (
    TAO_Abstract_ServantBase *servant, TAO::Argument **args, int num_args);
  
  
  // TAO_IDL - Generated from
  // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/proxy_impl_xh.cpp:24
  
  static void
  getEnvs (
    TAO_Abstract_ServantBase *servant, TAO::Argument **args, int num_args);
  
  
  // TAO_IDL - Generated from
  // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/proxy_impl_xh.cpp:24
  
  static void
  getRedundancyType (
    TAO_Abstract_ServantBase *servant, TAO::Argument **args, int num_args);
  
  
  // TAO_IDL - Generated from
  // be\be_interface.cpp:2223
  
  static void
  scs_implementation (
    TAO_Abstract_ServantBase *servant, TAO::Argument **args, int num_args);
  
  
  // TAO_IDL - Generated from
  // be\be_interface.cpp:2223
  
  static void
  scs_host (
    TAO_Abstract_ServantBase *servant, TAO::Argument **args, int num_args);
  
  
  // TAO_IDL - Generated from
  // be\be_interface.cpp:2223
  
  static void
  isAlive (
    TAO_Abstract_ServantBase *servant, TAO::Argument **args, int num_args);
  
};

//
//                Direct  Proxy Impl. Declaration
///////////////////////////////////////////////////////////////////////



// TAO_IDL - Generated from 
// be\be_codegen.cpp:1290

#include "ascmanager_skel_tie.hh"

#if defined (__ACE_INLINE__)
#include "ascmanager_skel.inl"
#endif /* defined INLINE */

#endif /* ifndef */

