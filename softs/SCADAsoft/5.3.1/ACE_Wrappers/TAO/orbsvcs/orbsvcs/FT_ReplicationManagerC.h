// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler v1.6a_p10 ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
// and
//       Institute for Software Integrated Systems
//       Vanderbilt University
//       Nashville, TN
//       USA
//       http://www.isis.vanderbilt.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html

// TAO_IDL - Generated from
// be\be_codegen.cpp:135

#ifndef _TAO_IDL_FT_REPLICATIONMANAGERC_H_
#define _TAO_IDL_FT_REPLICATIONMANAGERC_H_

#include /**/ "ace/pre.h"


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include /**/ "orbsvcs/FaultTolerance/fault_tol_export.h"
#include "tao/AnyTypeCode/AnyTypeCode_methods.h"
#include "tao/ORB.h"
#include "tao/SystemException.h"
#include "tao/UserException.h"
#include "tao/Basic_Types.h"
#include "tao/ORB_Constants.h"
#include "tao/Object.h"
#include "tao/String_Manager_T.h"
#include "tao/Objref_VarOut_T.h"
#include "tao/VarOut_T.h"
#include /**/ "tao/Versioned_Namespace.h"

#include "orbsvcs/PortableGroupC.h"
#include "orbsvcs/FT_CORBAC.h"
#include "orbsvcs/FT_ReplicaC.h"
#include "orbsvcs/FT_NotifierC.h"

#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO TAO_FT_Export

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from 
// d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_root/root_ch.cpp:62

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  class Collocation_Proxy_Broker;
  template<typename T> class Narrow_Utils;
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_module/module_ch.cpp:49

namespace FT
{
  
  // TAO_IDL - Generated from
  // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_exception/exception_ch.cpp:53

#if !defined (_FT_INTERFACENOTFOUND_CH_)
#define _FT_INTERFACENOTFOUND_CH_
  
  class TAO_FT_Export InterfaceNotFound : public ::CORBA::UserException
  {
  public:
    
    InterfaceNotFound (void);
    InterfaceNotFound (const InterfaceNotFound &);
    ~InterfaceNotFound (void);

    InterfaceNotFound &operator= (const InterfaceNotFound &);
    
    static void _tao_any_destructor (void *);
    
    static InterfaceNotFound *_downcast ( ::CORBA::Exception *);
    static const InterfaceNotFound *_downcast ( ::CORBA::Exception const *);
    
    static ::CORBA::Exception *_alloc (void);
    
    virtual ::CORBA::Exception *_tao_duplicate (void) const;

    virtual void _raise (void) const;

    virtual void _tao_encode (TAO_OutputCDR &cdr) const;
    virtual void _tao_decode (TAO_InputCDR &cdr);
    
    
    virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
  };
  
  // TAO_IDL - Generated from
  // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:49
  
  extern TAO_FT_Export ::CORBA::TypeCode_ptr const _tc_InterfaceNotFound;

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // be\be_interface.cpp:644

#if !defined (_FT_REPLICATIONMANAGER__VAR_OUT_CH_)
#define _FT_REPLICATIONMANAGER__VAR_OUT_CH_
  
  class ReplicationManager;
  typedef ReplicationManager *ReplicationManager_ptr;
  
  typedef
    TAO_Objref_Var_T<
        ReplicationManager
      >
    ReplicationManager_var;
  
  typedef
    TAO_Objref_Out_T<
        ReplicationManager
      >
    ReplicationManager_out;

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:54

#if !defined (_FT_REPLICATIONMANAGER_CH_)
#define _FT_REPLICATIONMANAGER_CH_
  
  class TAO_FT_Export ReplicationManager
    : public virtual ::PortableGroup::PropertyManager,
      public virtual ::FT::FTObjectGroupManager,
      public virtual ::PortableGroup::GenericFactory
  {
  public:
    friend class TAO::Narrow_Utils<ReplicationManager>;
    typedef ReplicationManager_ptr _ptr_type;
    typedef ReplicationManager_var _var_type;
    typedef ReplicationManager_out _out_type;
    
    // The static operations.
    static ReplicationManager_ptr _duplicate (ReplicationManager_ptr obj);
    
    static void _tao_release (ReplicationManager_ptr obj);
    
    static ReplicationManager_ptr _narrow (::CORBA::Object_ptr obj);
    static ReplicationManager_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static ReplicationManager_ptr _nil (void)
    {
      return static_cast<ReplicationManager_ptr> (0);
    }
    
    static void _tao_any_destructor (void *);
    
    // TAO_IDL - Generated from
    // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/operation_ch.cpp:46
    
    virtual void register_fault_notifier (
        ::FT::FaultNotifier_ptr fault_notifier);
    
    // TAO_IDL - Generated from
    // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/operation_ch.cpp:46
    
    virtual ::FT::FaultNotifier_ptr get_fault_notifier (
        void);
    
    // TAO_IDL - Generated from
    // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/operation_ch.cpp:46
    
    virtual ::PortableGroup::FactoryRegistry_ptr get_factory_registry (
        const ::PortableGroup::Criteria & selection_criteria);
    
    // TAO_IDL - Generated from
    // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/operation_ch.cpp:46
    
    virtual void shutdown (
        void);
    
    // TAO_IDL - Generated from
    // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:216
    
    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  private:
    TAO::Collocation_Proxy_Broker *the_TAO_ReplicationManager_Proxy_Broker_;
  
  protected:
    // Concrete interface only.
    ReplicationManager (void);
    
    // These methods travese the inheritance tree and set the
    // parents piece of the given class in the right mode.
    virtual void FT_ReplicationManager_setup_collocation (void);
    
    // Concrete non-local interface only.
    ReplicationManager (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    ReplicationManager (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);
    
    virtual ~ReplicationManager (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    ReplicationManager (const ReplicationManager &);
    
    void operator= (const ReplicationManager &);
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:49
  
  extern TAO_FT_Export ::CORBA::TypeCode_ptr const _tc_ReplicationManager;

// TAO_IDL - Generated from
// d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_module/module_ch.cpp:78

} // module FT

// Proxy Broker Factory function pointer declarations.

// TAO_IDL - Generated from
// d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_root/root.cpp:139

extern TAO_FT_Export
TAO::Collocation_Proxy_Broker *
(*FT__TAO_ReplicationManager_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj
  );

// TAO_IDL - Generated from
// be\be_visitor_traits.cpp:64


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{

#if !defined (_FT_REPLICATIONMANAGER__TRAITS_)
#define _FT_REPLICATIONMANAGER__TRAITS_
  
  template<>
  struct TAO_FT_Export Objref_Traits< ::FT::ReplicationManager>
  {
    static ::FT::ReplicationManager_ptr duplicate (
        ::FT::ReplicationManager_ptr p
      );
    static void release (
        ::FT::ReplicationManager_ptr p
      );
    static ::FT::ReplicationManager_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::FT::ReplicationManager_ptr p,
        TAO_OutputCDR & cdr
      );
  };

#endif /* end #if !defined */
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_exception/any_op_ch.cpp:53

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_FT_Export void operator<<= (::CORBA::Any &, const FT::InterfaceNotFound &); // copying version
TAO_FT_Export void operator<<= (::CORBA::Any &, FT::InterfaceNotFound*); // noncopying version
TAO_FT_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, FT::InterfaceNotFound *&); // deprecated
TAO_FT_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const FT::InterfaceNotFound *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_interface/any_op_ch.cpp:54



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace FT
{
  TAO_FT_Export void operator<<= ( ::CORBA::Any &, ReplicationManager_ptr); // copying
  TAO_FT_Export void operator<<= ( ::CORBA::Any &, ReplicationManager_ptr *); // non-copying
  TAO_FT_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ReplicationManager_ptr &);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_FT_Export void operator<<= (::CORBA::Any &, FT::ReplicationManager_ptr); // copying
TAO_FT_Export void operator<<= (::CORBA::Any &, FT::ReplicationManager_ptr *); // non-copying
TAO_FT_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, FT::ReplicationManager_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_exception/cdr_op_ch.cpp:52

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_FT_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const FT::InterfaceNotFound &);
TAO_FT_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, FT::InterfaceNotFound &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_interface/cdr_op_ch.cpp:55


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_FT_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const FT::ReplicationManager_ptr );
TAO_FT_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, FT::ReplicationManager_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// be\be_codegen.cpp:1228


TAO_END_VERSIONED_NAMESPACE_DECL

#if defined (__ACE_INLINE__)
#include "FT_ReplicationManagerC.inl"
#endif /* defined INLINE */

#include /**/ "ace/post.h"

#endif /* ifndef */


