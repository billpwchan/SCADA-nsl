// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler v1.6a_p10 ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
// and
//       Institute for Software Integrated Systems
//       Vanderbilt University
//       Nashville, TN
//       USA
//       http://www.isis.vanderbilt.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html

// TAO_IDL - Generated from
// be\be_codegen.cpp:487

#ifndef _TAO_IDL_RTECEVENTCHANNELADMINS_H_
#define _TAO_IDL_RTECEVENTCHANNELADMINS_H_

#include /**/ "ace/pre.h"

#include "RtecEventChannelAdminC.h"
#include "RtecEventCommS.h"
#include "RtecBaseS.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */

#include "tao/Collocation_Proxy_Broker.h"
#include "tao/PortableServer/PortableServer.h"
#include "tao/PortableServer/Servant_Base.h"

#include /**/ "orbsvcs/Event/event_skel_export.h"

#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO TAO_RTEvent_Skel_Export

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_module/module_sh.cpp:49

namespace POA_RtecEventChannelAdmin
{
  
  
  // TAO_IDL - Generated from
  // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_interface/interface_sh.cpp:87
  
  class ProxyPushSupplier;
  typedef ProxyPushSupplier *ProxyPushSupplier_ptr;
  
  class TAO_RTEvent_Skel_Export ProxyPushSupplier
    : public virtual POA_RtecEventComm::PushSupplier
  {
  protected:
    ProxyPushSupplier (void);
  
  public:
    // Useful for template programming.
    typedef ::RtecEventChannelAdmin::ProxyPushSupplier _stub_type;
    typedef ::RtecEventChannelAdmin::ProxyPushSupplier_ptr _stub_ptr_type;
    typedef ::RtecEventChannelAdmin::ProxyPushSupplier_var _stub_var_type;
    
    ProxyPushSupplier (const ProxyPushSupplier& rhs);
    virtual ~ProxyPushSupplier (void);
    
    virtual ::CORBA::Boolean _is_a (const char* logical_type_id);
    
    static void _is_a_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant
      );
    
    static void _non_existent_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant
      );
    
    static void _interface_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant
      );
    
    static void _component_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant
      );
    
    static void _repository_id_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant);
    
    virtual void _dispatch (
        TAO_ServerRequest & req,
        void * servant_upcall);
    
    ::RtecEventChannelAdmin::ProxyPushSupplier *_this (void);
    
    virtual const char* _interface_repository_id (void) const;
    
    // TAO_IDL - Generated from
    // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/operation_sh.cpp:45
    
    virtual void connect_push_consumer (
        ::RtecEventComm::PushConsumer_ptr push_consumer,
        const ::RtecEventChannelAdmin::ConsumerQOS & qos) = 0;
    
    static void connect_push_consumer_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    // TAO_IDL - Generated from
    // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/operation_sh.cpp:45
    
    virtual void suspend_connection (
        void) = 0;
    
    static void suspend_connection_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    // TAO_IDL - Generated from
    // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/operation_sh.cpp:45
    
    virtual void resume_connection (
        void) = 0;
    
    static void resume_connection_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    // TAO_IDL - Generated from
    // be\be_interface.cpp:2044
    
    static void
    disconnect_push_supplier_skel (
        TAO_ServerRequest & server_request, 
        void * servant_upcall,
        void * servant
      );
  };
  
  // TAO_IDL - Generated from
  // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_interface/interface_sh.cpp:87
  
  class ProxyPushConsumer;
  typedef ProxyPushConsumer *ProxyPushConsumer_ptr;
  
  class TAO_RTEvent_Skel_Export ProxyPushConsumer
    : public virtual POA_RtecEventComm::PushConsumer
  {
  protected:
    ProxyPushConsumer (void);
  
  public:
    // Useful for template programming.
    typedef ::RtecEventChannelAdmin::ProxyPushConsumer _stub_type;
    typedef ::RtecEventChannelAdmin::ProxyPushConsumer_ptr _stub_ptr_type;
    typedef ::RtecEventChannelAdmin::ProxyPushConsumer_var _stub_var_type;
    
    ProxyPushConsumer (const ProxyPushConsumer& rhs);
    virtual ~ProxyPushConsumer (void);
    
    virtual ::CORBA::Boolean _is_a (const char* logical_type_id);
    
    static void _is_a_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant
      );
    
    static void _non_existent_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant
      );
    
    static void _interface_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant
      );
    
    static void _component_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant
      );
    
    static void _repository_id_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant);
    
    virtual void _dispatch (
        TAO_ServerRequest & req,
        void * servant_upcall);
    
    ::RtecEventChannelAdmin::ProxyPushConsumer *_this (void);
    
    virtual const char* _interface_repository_id (void) const;
    
    // TAO_IDL - Generated from
    // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/operation_sh.cpp:45
    
    virtual void connect_push_supplier (
        ::RtecEventComm::PushSupplier_ptr push_supplier,
        const ::RtecEventChannelAdmin::SupplierQOS & qos) = 0;
    
    static void connect_push_supplier_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    // TAO_IDL - Generated from
    // be\be_interface.cpp:2044
    
    static void
    push_skel (
        TAO_ServerRequest & server_request, 
        void * servant_upcall,
        void * servant
      );
    
    // TAO_IDL - Generated from
    // be\be_interface.cpp:2044
    
    static void
    disconnect_push_consumer_skel (
        TAO_ServerRequest & server_request, 
        void * servant_upcall,
        void * servant
      );
  };
  
  // TAO_IDL - Generated from
  // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_interface/interface_sh.cpp:87
  
  class ConsumerAdmin;
  typedef ConsumerAdmin *ConsumerAdmin_ptr;
  
  class TAO_RTEvent_Skel_Export ConsumerAdmin
    : public virtual PortableServer::ServantBase
  {
  protected:
    ConsumerAdmin (void);
  
  public:
    // Useful for template programming.
    typedef ::RtecEventChannelAdmin::ConsumerAdmin _stub_type;
    typedef ::RtecEventChannelAdmin::ConsumerAdmin_ptr _stub_ptr_type;
    typedef ::RtecEventChannelAdmin::ConsumerAdmin_var _stub_var_type;
    
    ConsumerAdmin (const ConsumerAdmin& rhs);
    virtual ~ConsumerAdmin (void);
    
    virtual ::CORBA::Boolean _is_a (const char* logical_type_id);
    
    static void _is_a_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant
      );
    
    static void _non_existent_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant
      );
    
    static void _interface_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant
      );
    
    static void _component_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant
      );
    
    static void _repository_id_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant);
    
    virtual void _dispatch (
        TAO_ServerRequest & req,
        void * servant_upcall);
    
    ::RtecEventChannelAdmin::ConsumerAdmin *_this (void);
    
    virtual const char* _interface_repository_id (void) const;
    
    // TAO_IDL - Generated from
    // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/operation_sh.cpp:45
    
    virtual ::RtecEventChannelAdmin::ProxyPushSupplier_ptr obtain_push_supplier (
        void) = 0;
    
    static void obtain_push_supplier_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
  };
  
  // TAO_IDL - Generated from
  // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_interface/interface_sh.cpp:87
  
  class SupplierAdmin;
  typedef SupplierAdmin *SupplierAdmin_ptr;
  
  class TAO_RTEvent_Skel_Export SupplierAdmin
    : public virtual PortableServer::ServantBase
  {
  protected:
    SupplierAdmin (void);
  
  public:
    // Useful for template programming.
    typedef ::RtecEventChannelAdmin::SupplierAdmin _stub_type;
    typedef ::RtecEventChannelAdmin::SupplierAdmin_ptr _stub_ptr_type;
    typedef ::RtecEventChannelAdmin::SupplierAdmin_var _stub_var_type;
    
    SupplierAdmin (const SupplierAdmin& rhs);
    virtual ~SupplierAdmin (void);
    
    virtual ::CORBA::Boolean _is_a (const char* logical_type_id);
    
    static void _is_a_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant
      );
    
    static void _non_existent_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant
      );
    
    static void _interface_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant
      );
    
    static void _component_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant
      );
    
    static void _repository_id_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant);
    
    virtual void _dispatch (
        TAO_ServerRequest & req,
        void * servant_upcall);
    
    ::RtecEventChannelAdmin::SupplierAdmin *_this (void);
    
    virtual const char* _interface_repository_id (void) const;
    
    // TAO_IDL - Generated from
    // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/operation_sh.cpp:45
    
    virtual ::RtecEventChannelAdmin::ProxyPushConsumer_ptr obtain_push_consumer (
        void) = 0;
    
    static void obtain_push_consumer_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
  };
  
  // TAO_IDL - Generated from
  // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_interface/interface_sh.cpp:87
  
  class Observer;
  typedef Observer *Observer_ptr;
  
  class TAO_RTEvent_Skel_Export Observer
    : public virtual PortableServer::ServantBase
  {
  protected:
    Observer (void);
  
  public:
    // Useful for template programming.
    typedef ::RtecEventChannelAdmin::Observer _stub_type;
    typedef ::RtecEventChannelAdmin::Observer_ptr _stub_ptr_type;
    typedef ::RtecEventChannelAdmin::Observer_var _stub_var_type;
    
    Observer (const Observer& rhs);
    virtual ~Observer (void);
    
    virtual ::CORBA::Boolean _is_a (const char* logical_type_id);
    
    static void _is_a_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant
      );
    
    static void _non_existent_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant
      );
    
    static void _interface_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant
      );
    
    static void _component_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant
      );
    
    static void _repository_id_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant);
    
    virtual void _dispatch (
        TAO_ServerRequest & req,
        void * servant_upcall);
    
    ::RtecEventChannelAdmin::Observer *_this (void);
    
    virtual const char* _interface_repository_id (void) const;
    
    // TAO_IDL - Generated from
    // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/operation_sh.cpp:45
    
    virtual void update_consumer (
        const ::RtecEventChannelAdmin::ConsumerQOS & sub) = 0;
    
    static void update_consumer_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    // TAO_IDL - Generated from
    // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/operation_sh.cpp:45
    
    virtual void update_supplier (
        const ::RtecEventChannelAdmin::SupplierQOS & pub) = 0;
    
    static void update_supplier_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
  };
  
  // TAO_IDL - Generated from
  // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_interface/interface_sh.cpp:87
  
  class EventChannel;
  typedef EventChannel *EventChannel_ptr;
  
  class TAO_RTEvent_Skel_Export EventChannel
    : public virtual PortableServer::ServantBase
  {
  protected:
    EventChannel (void);
  
  public:
    // Useful for template programming.
    typedef ::RtecEventChannelAdmin::EventChannel _stub_type;
    typedef ::RtecEventChannelAdmin::EventChannel_ptr _stub_ptr_type;
    typedef ::RtecEventChannelAdmin::EventChannel_var _stub_var_type;
    
    EventChannel (const EventChannel& rhs);
    virtual ~EventChannel (void);
    
    virtual ::CORBA::Boolean _is_a (const char* logical_type_id);
    
    static void _is_a_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant
      );
    
    static void _non_existent_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant
      );
    
    static void _interface_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant
      );
    
    static void _component_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant
      );
    
    static void _repository_id_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant);
    
    virtual void _dispatch (
        TAO_ServerRequest & req,
        void * servant_upcall);
    
    ::RtecEventChannelAdmin::EventChannel *_this (void);
    
    virtual const char* _interface_repository_id (void) const;
    
    // TAO_IDL - Generated from
    // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/operation_sh.cpp:45
    
    virtual ::RtecEventChannelAdmin::ConsumerAdmin_ptr for_consumers (
        void) = 0;
    
    static void for_consumers_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    // TAO_IDL - Generated from
    // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/operation_sh.cpp:45
    
    virtual ::RtecEventChannelAdmin::SupplierAdmin_ptr for_suppliers (
        void) = 0;
    
    static void for_suppliers_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    // TAO_IDL - Generated from
    // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/operation_sh.cpp:45
    
    virtual void destroy (
        void) = 0;
    
    static void destroy_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    // TAO_IDL - Generated from
    // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/operation_sh.cpp:45
    
    virtual ::RtecEventChannelAdmin::Observer_Handle append_observer (
        ::RtecEventChannelAdmin::Observer_ptr gw) = 0;
    
    static void append_observer_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    // TAO_IDL - Generated from
    // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/operation_sh.cpp:45
    
    virtual void remove_observer (
        ::RtecEventChannelAdmin::Observer_Handle gw) = 0;
    
    static void remove_observer_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
  };

// TAO_IDL - Generated from
// d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_module/module_sh.cpp:80

} // module RtecEventChannelAdmin

// TAO_IDL - Generated from 
// be\be_codegen.cpp:1290



TAO_END_VERSIONED_NAMESPACE_DECL

#include "RtecEventChannelAdminS_T.h"

#if defined (__ACE_INLINE__)
#include "RtecEventChannelAdminS.inl"
#endif /* defined INLINE */

#include /**/ "ace/post.h"
#endif /* ifndef */

