// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler v1.6a_p10 ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
// and
//       Institute for Software Integrated Systems
//       Vanderbilt University
//       Nashville, TN
//       USA
//       http://www.isis.vanderbilt.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html

// TAO_IDL - Generated from
// be\be_codegen.cpp:135

#ifndef _TAO_IDL_COSLOADBALANCINGC_H_
#define _TAO_IDL_COSLOADBALANCINGC_H_

#include /**/ "ace/pre.h"


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include /**/ "orbsvcs/LoadBalancing/LoadBalancing_export.h"
#include "tao/AnyTypeCode/AnyTypeCode_methods.h"
#include "tao/Valuetype/ValueBase.h"
#include "tao/Valuetype/Valuetype_Adapter_Factory_Impl.h"
#include "tao/ORB.h"
#include "tao/SystemException.h"
#include "tao/UserException.h"
#include "tao/Basic_Types.h"
#include "tao/ORB_Constants.h"
#include "tao/Object.h"
#include "tao/String_Manager_T.h"
#include "tao/Messaging/Messaging.h"
#include "tao/AnyTypeCode/OctetSeqA.h"
#include "tao/AnyTypeCode/orb_typesA.h"
#include "tao/AnyTypeCode/PolicyA.h"
#include "tao/AnyTypeCode/UShortSeqA.h"
#include "tao/AnyTypeCode/BooleanSeqA.h"
#include "tao/AnyTypeCode/CharSeqA.h"
#include "tao/AnyTypeCode/DoubleSeqA.h"
#include "tao/AnyTypeCode/FloatSeqA.h"
#include "tao/AnyTypeCode/LongDoubleSeqA.h"
#include "tao/AnyTypeCode/LongSeqA.h"
#include "tao/AnyTypeCode/ShortSeqA.h"
#include "tao/AnyTypeCode/StringSeqA.h"
#include "tao/AnyTypeCode/ULongSeqA.h"
#include "tao/AnyTypeCode/WCharSeqA.h"
#include "tao/AnyTypeCode/WStringSeqA.h"
#include "tao/AnyTypeCode/LongLongSeqA.h"
#include "tao/AnyTypeCode/ULongLongSeqA.h"
#include "tao/AnyTypeCode/Policy_ManagerA.h"
#include "tao/AnyTypeCode/Policy_CurrentA.h"
#include "tao/AnyTypeCode/ServicesA.h"
#include "tao/AnyTypeCode/ParameterModeA.h"
#include "tao/AnyTypeCode/Typecode_typesA.h"
#include "tao/AnyTypeCode/WrongTransactionA.h"
#include "tao/Sequence_T.h"
#include "tao/Valuetype/Value_VarOut_T.h"
#include "tao/Objref_VarOut_T.h"
#include "tao/Seq_Var_T.h"
#include "tao/Seq_Out_T.h"
#include "tao/VarOut_T.h"
#include /**/ "tao/Versioned_Namespace.h"

#include "PortableGroupC.h"
#include "tao/OctetSeqC.h"
#include "tao/orb_typesC.h"
#include "tao/PolicyC.h"
#include "tao/UShortSeqC.h"
#include "tao/BooleanSeqC.h"
#include "tao/CharSeqC.h"
#include "tao/DoubleSeqC.h"
#include "tao/FloatSeqC.h"
#include "tao/LongDoubleSeqC.h"
#include "tao/LongSeqC.h"
#include "tao/ShortSeqC.h"
#include "tao/StringSeqC.h"
#include "tao/ULongSeqC.h"
#include "tao/WCharSeqC.h"
#include "tao/WStringSeqC.h"
#include "tao/LongLongSeqC.h"
#include "tao/ULongLongSeqC.h"
#include "tao/Policy_ManagerC.h"
#include "tao/Policy_CurrentC.h"
#include "tao/ServicesC.h"
#include "tao/ParameterModeC.h"
#include "tao/Typecode_typesC.h"
#include "tao/WrongTransactionC.h"

#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO TAO_LoadBalancing_Export

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from 
// d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_root/root_ch.cpp:62

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  class Collocation_Proxy_Broker;
  template<typename T> class Narrow_Utils;
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_module/module_ch.cpp:49

namespace CosLoadBalancing
{
  
  // TAO_IDL - Generated from
  // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_constant/constant_ch.cpp:52
  
  const IOP::ServiceId LOAD_MANAGED = 123456U;
  
  // TAO_IDL - Generated from
  // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_typedef/typedef_ch.cpp:472
  
  typedef PortableGroup::Location Location;
  typedef PortableGroup::Location_var Location_var;
  typedef PortableGroup::Location_out Location_out;
  
  // TAO_IDL - Generated from
  // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:49
  
  extern TAO_LoadBalancing_Export ::CORBA::TypeCode_ptr const _tc_Location;
  
  // TAO_IDL - Generated from
  // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_typedef/typedef_ch.cpp:472
  
  typedef PortableGroup::Properties Properties;
  typedef PortableGroup::Properties_var Properties_var;
  typedef PortableGroup::Properties_out Properties_out;
  
  // TAO_IDL - Generated from
  // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:49
  
  extern TAO_LoadBalancing_Export ::CORBA::TypeCode_ptr const _tc_Properties;
  
  // TAO_IDL - Generated from
  // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_typedef/typedef_ch.cpp:379
  
  typedef ::CORBA::ULong LoadId;
  typedef ::CORBA::ULong_out LoadId_out;
  
  // TAO_IDL - Generated from
  // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:49
  
  extern TAO_LoadBalancing_Export ::CORBA::TypeCode_ptr const _tc_LoadId;
  
  // TAO_IDL - Generated from
  // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_constant/constant_ch.cpp:52
  
  const CosLoadBalancing::LoadId LoadAverage = 0U;
  
  // TAO_IDL - Generated from
  // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_constant/constant_ch.cpp:52
  
  const CosLoadBalancing::LoadId Disk = 1U;
  
  // TAO_IDL - Generated from
  // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_constant/constant_ch.cpp:52
  
  const CosLoadBalancing::LoadId Memory = 2U;
  
  // TAO_IDL - Generated from
  // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_constant/constant_ch.cpp:52
  
  const CosLoadBalancing::LoadId Network = 3U;
  
  // TAO_IDL - Generated from
  // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_constant/constant_ch.cpp:52
  
  const CosLoadBalancing::LoadId RequestsPerSecond = 4U;
  
  // TAO_IDL - Generated from
  // be\be_type.cpp:269
  
  struct Load;
  
  typedef
    TAO_Fixed_Var_T<
        Load
      >
    Load_var;
  
  typedef
    Load &
    Load_out;
  
  // TAO_IDL - Generated from
  // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_structure/structure_ch.cpp:57
  
  struct TAO_LoadBalancing_Export Load
  {
    typedef Load_var _var_type;
    typedef Load_out _out_type;
    
    static void _tao_any_destructor (void *);
    CosLoadBalancing::LoadId id;
    ::CORBA::Float value;
  };
  
  // TAO_IDL - Generated from
  // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:49
  
  extern TAO_LoadBalancing_Export ::CORBA::TypeCode_ptr const _tc_Load;
  
  // TAO_IDL - Generated from
  // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_sequence/sequence_ch.cpp:107

#if !defined (_COSLOADBALANCING_LOADLIST_CH_)
#define _COSLOADBALANCING_LOADLIST_CH_
  
  class LoadList;
  
  typedef
    TAO_FixedSeq_Var_T<
        LoadList
      >
    LoadList_var;
  
  typedef
    TAO_Seq_Out_T<
        LoadList
      >
    LoadList_out;
  
  class TAO_LoadBalancing_Export LoadList
    : public
        TAO::unbounded_value_sequence<
            Load
          >
  {
  public:
    LoadList (void);
    LoadList ( ::CORBA::ULong max);
    LoadList (
        ::CORBA::ULong max,
        ::CORBA::ULong length,
        Load* buffer, 
        ::CORBA::Boolean release = false
      );
    LoadList (const LoadList &);
    virtual ~LoadList (void);
    
    static void _tao_any_destructor (void *);
    
    typedef LoadList_var _var_type;
    typedef LoadList_out _out_type;
    
    
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:49
  
  extern TAO_LoadBalancing_Export ::CORBA::TypeCode_ptr const _tc_LoadList;
  
  // TAO_IDL - Generated from
  // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_exception/exception_ch.cpp:53

#if !defined (_COSLOADBALANCING_MONITORALREADYPRESENT_CH_)
#define _COSLOADBALANCING_MONITORALREADYPRESENT_CH_
  
  class TAO_LoadBalancing_Export MonitorAlreadyPresent : public ::CORBA::UserException
  {
  public:
    
    MonitorAlreadyPresent (void);
    MonitorAlreadyPresent (const MonitorAlreadyPresent &);
    ~MonitorAlreadyPresent (void);

    MonitorAlreadyPresent &operator= (const MonitorAlreadyPresent &);
    
    static void _tao_any_destructor (void *);
    
    static MonitorAlreadyPresent *_downcast ( ::CORBA::Exception *);
    static const MonitorAlreadyPresent *_downcast ( ::CORBA::Exception const *);
    
    static ::CORBA::Exception *_alloc (void);
    
    virtual ::CORBA::Exception *_tao_duplicate (void) const;

    virtual void _raise (void) const;

    virtual void _tao_encode (TAO_OutputCDR &cdr) const;
    virtual void _tao_decode (TAO_InputCDR &cdr);
    
    
    virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
  };
  
  // TAO_IDL - Generated from
  // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:49
  
  extern TAO_LoadBalancing_Export ::CORBA::TypeCode_ptr const _tc_MonitorAlreadyPresent;

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_exception/exception_ch.cpp:53

#if !defined (_COSLOADBALANCING_LOCATIONNOTFOUND_CH_)
#define _COSLOADBALANCING_LOCATIONNOTFOUND_CH_
  
  class TAO_LoadBalancing_Export LocationNotFound : public ::CORBA::UserException
  {
  public:
    
    LocationNotFound (void);
    LocationNotFound (const LocationNotFound &);
    ~LocationNotFound (void);

    LocationNotFound &operator= (const LocationNotFound &);
    
    static void _tao_any_destructor (void *);
    
    static LocationNotFound *_downcast ( ::CORBA::Exception *);
    static const LocationNotFound *_downcast ( ::CORBA::Exception const *);
    
    static ::CORBA::Exception *_alloc (void);
    
    virtual ::CORBA::Exception *_tao_duplicate (void) const;

    virtual void _raise (void) const;

    virtual void _tao_encode (TAO_OutputCDR &cdr) const;
    virtual void _tao_decode (TAO_InputCDR &cdr);
    
    
    virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
  };
  
  // TAO_IDL - Generated from
  // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:49
  
  extern TAO_LoadBalancing_Export ::CORBA::TypeCode_ptr const _tc_LocationNotFound;

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_exception/exception_ch.cpp:53

#if !defined (_COSLOADBALANCING_LOADALERTNOTFOUND_CH_)
#define _COSLOADBALANCING_LOADALERTNOTFOUND_CH_
  
  class TAO_LoadBalancing_Export LoadAlertNotFound : public ::CORBA::UserException
  {
  public:
    
    LoadAlertNotFound (void);
    LoadAlertNotFound (const LoadAlertNotFound &);
    ~LoadAlertNotFound (void);

    LoadAlertNotFound &operator= (const LoadAlertNotFound &);
    
    static void _tao_any_destructor (void *);
    
    static LoadAlertNotFound *_downcast ( ::CORBA::Exception *);
    static const LoadAlertNotFound *_downcast ( ::CORBA::Exception const *);
    
    static ::CORBA::Exception *_alloc (void);
    
    virtual ::CORBA::Exception *_tao_duplicate (void) const;

    virtual void _raise (void) const;

    virtual void _tao_encode (TAO_OutputCDR &cdr) const;
    virtual void _tao_decode (TAO_InputCDR &cdr);
    
    
    virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
  };
  
  // TAO_IDL - Generated from
  // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:49
  
  extern TAO_LoadBalancing_Export ::CORBA::TypeCode_ptr const _tc_LoadAlertNotFound;

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_exception/exception_ch.cpp:53

#if !defined (_COSLOADBALANCING_LOADALERTALREADYPRESENT_CH_)
#define _COSLOADBALANCING_LOADALERTALREADYPRESENT_CH_
  
  class TAO_LoadBalancing_Export LoadAlertAlreadyPresent : public ::CORBA::UserException
  {
  public:
    
    LoadAlertAlreadyPresent (void);
    LoadAlertAlreadyPresent (const LoadAlertAlreadyPresent &);
    ~LoadAlertAlreadyPresent (void);

    LoadAlertAlreadyPresent &operator= (const LoadAlertAlreadyPresent &);
    
    static void _tao_any_destructor (void *);
    
    static LoadAlertAlreadyPresent *_downcast ( ::CORBA::Exception *);
    static const LoadAlertAlreadyPresent *_downcast ( ::CORBA::Exception const *);
    
    static ::CORBA::Exception *_alloc (void);
    
    virtual ::CORBA::Exception *_tao_duplicate (void) const;

    virtual void _raise (void) const;

    virtual void _tao_encode (TAO_OutputCDR &cdr) const;
    virtual void _tao_decode (TAO_InputCDR &cdr);
    
    
    virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
  };
  
  // TAO_IDL - Generated from
  // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:49
  
  extern TAO_LoadBalancing_Export ::CORBA::TypeCode_ptr const _tc_LoadAlertAlreadyPresent;

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_exception/exception_ch.cpp:53

#if !defined (_COSLOADBALANCING_LOADALERTNOTADDED_CH_)
#define _COSLOADBALANCING_LOADALERTNOTADDED_CH_
  
  class TAO_LoadBalancing_Export LoadAlertNotAdded : public ::CORBA::UserException
  {
  public:
    
    LoadAlertNotAdded (void);
    LoadAlertNotAdded (const LoadAlertNotAdded &);
    ~LoadAlertNotAdded (void);

    LoadAlertNotAdded &operator= (const LoadAlertNotAdded &);
    
    static void _tao_any_destructor (void *);
    
    static LoadAlertNotAdded *_downcast ( ::CORBA::Exception *);
    static const LoadAlertNotAdded *_downcast ( ::CORBA::Exception const *);
    
    static ::CORBA::Exception *_alloc (void);
    
    virtual ::CORBA::Exception *_tao_duplicate (void) const;

    virtual void _raise (void) const;

    virtual void _tao_encode (TAO_OutputCDR &cdr) const;
    virtual void _tao_decode (TAO_InputCDR &cdr);
    
    
    virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
  };
  
  // TAO_IDL - Generated from
  // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:49
  
  extern TAO_LoadBalancing_Export ::CORBA::TypeCode_ptr const _tc_LoadAlertNotAdded;

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_exception/exception_ch.cpp:53

#if !defined (_COSLOADBALANCING_STRATEGYNOTADAPTIVE_CH_)
#define _COSLOADBALANCING_STRATEGYNOTADAPTIVE_CH_
  
  class TAO_LoadBalancing_Export StrategyNotAdaptive : public ::CORBA::UserException
  {
  public:
    
    StrategyNotAdaptive (void);
    StrategyNotAdaptive (const StrategyNotAdaptive &);
    ~StrategyNotAdaptive (void);

    StrategyNotAdaptive &operator= (const StrategyNotAdaptive &);
    
    static void _tao_any_destructor (void *);
    
    static StrategyNotAdaptive *_downcast ( ::CORBA::Exception *);
    static const StrategyNotAdaptive *_downcast ( ::CORBA::Exception const *);
    
    static ::CORBA::Exception *_alloc (void);
    
    virtual ::CORBA::Exception *_tao_duplicate (void) const;

    virtual void _raise (void) const;

    virtual void _tao_encode (TAO_OutputCDR &cdr) const;
    virtual void _tao_decode (TAO_InputCDR &cdr);
    
    
    virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
  };
  
  // TAO_IDL - Generated from
  // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:49
  
  extern TAO_LoadBalancing_Export ::CORBA::TypeCode_ptr const _tc_StrategyNotAdaptive;

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // be\be_interface.cpp:644

#if !defined (_COSLOADBALANCING_LOADMANAGER__VAR_OUT_CH_)
#define _COSLOADBALANCING_LOADMANAGER__VAR_OUT_CH_
  
  class LoadManager;
  typedef LoadManager *LoadManager_ptr;
  
  typedef
    TAO_Objref_Var_T<
        LoadManager
      >
    LoadManager_var;
  
  typedef
    TAO_Objref_Out_T<
        LoadManager
      >
    LoadManager_out;

#endif /* end #if !defined */

#if !defined (_COSLOADBALANCING_AMI_STRATEGYHANDLER___PTR_CH_)
#define _COSLOADBALANCING_AMI_STRATEGYHANDLER___PTR_CH_
  
  class AMI_StrategyHandler;
  typedef AMI_StrategyHandler *AMI_StrategyHandler_ptr;

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // be\be_interface.cpp:644

#if !defined (_COSLOADBALANCING_STRATEGY__VAR_OUT_CH_)
#define _COSLOADBALANCING_STRATEGY__VAR_OUT_CH_
  
  class Strategy;
  typedef Strategy *Strategy_ptr;
  
  typedef
    TAO_Objref_Var_T<
        Strategy
      >
    Strategy_var;
  
  typedef
    TAO_Objref_Out_T<
        Strategy
      >
    Strategy_out;

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:54

#if !defined (_COSLOADBALANCING_STRATEGY_CH_)
#define _COSLOADBALANCING_STRATEGY_CH_
  
  class TAO_LoadBalancing_Export Strategy
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<Strategy>;
    typedef Strategy_ptr _ptr_type;
    typedef Strategy_var _var_type;
    typedef Strategy_out _out_type;
    
    // The static operations.
    static Strategy_ptr _duplicate (Strategy_ptr obj);
    
    static void _tao_release (Strategy_ptr obj);
    
    static Strategy_ptr _narrow (::CORBA::Object_ptr obj);
    static Strategy_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static Strategy_ptr _nil (void)
    {
      return static_cast<Strategy_ptr> (0);
    }
    
    static void _tao_any_destructor (void *);
    
    // TAO_IDL - Generated from
    // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/operation_ch.cpp:46
    
    virtual char * name (
        void);
    
    // TAO_IDL - Generated from
    // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/ami_ch.cpp:55
    
    virtual void sendc_get_name (
        ::CosLoadBalancing::AMI_StrategyHandler_ptr ami_handler);
    
    // TAO_IDL - Generated from
    // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/operation_ch.cpp:46
    
    virtual ::CosLoadBalancing::Properties * get_properties (
        void);
    
    // TAO_IDL - Generated from
    // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/ami_ch.cpp:55
    
    virtual void sendc_get_properties (
        ::CosLoadBalancing::AMI_StrategyHandler_ptr ami_handler);
    
    // TAO_IDL - Generated from
    // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/operation_ch.cpp:46
    
    virtual void push_loads (
        const ::PortableGroup::Location & the_location,
        const ::CosLoadBalancing::LoadList & loads);
    
    // TAO_IDL - Generated from
    // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/ami_ch.cpp:55
    
    virtual void sendc_push_loads (
        ::CosLoadBalancing::AMI_StrategyHandler_ptr ami_handler,
        const ::PortableGroup::Location & the_location,
        const ::CosLoadBalancing::LoadList & loads);
    
    // TAO_IDL - Generated from
    // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/operation_ch.cpp:46
    
    virtual ::CosLoadBalancing::LoadList * get_loads (
        ::CosLoadBalancing::LoadManager_ptr load_manager,
        const ::PortableGroup::Location & the_location);
    
    // TAO_IDL - Generated from
    // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/ami_ch.cpp:55
    
    virtual void sendc_get_loads (
        ::CosLoadBalancing::AMI_StrategyHandler_ptr ami_handler,
        ::CosLoadBalancing::LoadManager_ptr load_manager,
        const ::PortableGroup::Location & the_location);
    
    // TAO_IDL - Generated from
    // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/operation_ch.cpp:46
    
    virtual ::CORBA::Object_ptr next_member (
        ::PortableGroup::ObjectGroup_ptr object_group,
        ::CosLoadBalancing::LoadManager_ptr load_manager);
    
    // TAO_IDL - Generated from
    // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/ami_ch.cpp:55
    
    virtual void sendc_next_member (
        ::CosLoadBalancing::AMI_StrategyHandler_ptr ami_handler,
        ::PortableGroup::ObjectGroup_ptr object_group,
        ::CosLoadBalancing::LoadManager_ptr load_manager);
    
    // TAO_IDL - Generated from
    // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/operation_ch.cpp:46
    
    virtual void analyze_loads (
        ::PortableGroup::ObjectGroup_ptr object_group,
        ::CosLoadBalancing::LoadManager_ptr load_manager);
    
    // TAO_IDL - Generated from
    // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:216
    
    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  private:
    TAO::Collocation_Proxy_Broker *the_TAO_Strategy_Proxy_Broker_;
  
  protected:
    // Concrete interface only.
    Strategy (void);
    
    // These methods travese the inheritance tree and set the
    // parents piece of the given class in the right mode.
    virtual void CosLoadBalancing_Strategy_setup_collocation (void);
    
    // Concrete non-local interface only.
    Strategy (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    Strategy (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);
    
    virtual ~Strategy (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    Strategy (const Strategy &);
    
    void operator= (const Strategy &);
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:49
  
  extern TAO_LoadBalancing_Export ::CORBA::TypeCode_ptr const _tc_Strategy;
  
  // TAO_IDL - Generated from
  // be\be_interface.cpp:644

#if !defined (_COSLOADBALANCING_AMI_STRATEGYHANDLER__VAR_OUT_CH_)
#define _COSLOADBALANCING_AMI_STRATEGYHANDLER__VAR_OUT_CH_
  
  class AMI_StrategyHandler;
  typedef AMI_StrategyHandler *AMI_StrategyHandler_ptr;
  
  typedef
    TAO_Objref_Var_T<
        AMI_StrategyHandler
      >
    AMI_StrategyHandler_var;
  
  typedef
    TAO_Objref_Out_T<
        AMI_StrategyHandler
      >
    AMI_StrategyHandler_out;

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:54

#if !defined (_COSLOADBALANCING_AMI_STRATEGYHANDLER_CH_)
#define _COSLOADBALANCING_AMI_STRATEGYHANDLER_CH_
  
  class TAO_LoadBalancing_Export AMI_StrategyHandler
    : public virtual ::Messaging::ReplyHandler
  {
  public:
    friend class TAO::Narrow_Utils<AMI_StrategyHandler>;
    typedef AMI_StrategyHandler_ptr _ptr_type;
    typedef AMI_StrategyHandler_var _var_type;
    typedef AMI_StrategyHandler_out _out_type;
    
    // The static operations.
    static AMI_StrategyHandler_ptr _duplicate (AMI_StrategyHandler_ptr obj);
    
    static void _tao_release (AMI_StrategyHandler_ptr obj);
    
    static AMI_StrategyHandler_ptr _narrow (::CORBA::Object_ptr obj);
    static AMI_StrategyHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static AMI_StrategyHandler_ptr _nil (void)
    {
      return static_cast<AMI_StrategyHandler_ptr> (0);
    }
    
    static void _tao_any_destructor (void *);
    
    // TAO_IDL - Generated from
    // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/operation_ch.cpp:46
    
    virtual void get_name (
        const char * ami_return_val);
    
    static void get_name_reply_stub (
        TAO_InputCDR &_tao_reply_cdr,
        ::Messaging::ReplyHandler_ptr _tao_reply_handler,
        ::CORBA::ULong reply_status);
    
    // TAO_IDL - Generated from
    // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/operation_ch.cpp:46
    
    virtual void get_name_excep (
        ::Messaging::ExceptionHolder * excep_holder);
    
    // TAO_IDL - Generated from
    // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/operation_ch.cpp:46
    
    virtual void get_properties (
        const ::CosLoadBalancing::Properties & ami_return_val);
    
    static void get_properties_reply_stub (
        TAO_InputCDR &_tao_reply_cdr,
        ::Messaging::ReplyHandler_ptr _tao_reply_handler,
        ::CORBA::ULong reply_status);
    
    // TAO_IDL - Generated from
    // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/operation_ch.cpp:46
    
    virtual void get_properties_excep (
        ::Messaging::ExceptionHolder * excep_holder);
    
    // TAO_IDL - Generated from
    // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/operation_ch.cpp:46
    
    virtual void push_loads (
        void);
    
    static void push_loads_reply_stub (
        TAO_InputCDR &_tao_reply_cdr,
        ::Messaging::ReplyHandler_ptr _tao_reply_handler,
        ::CORBA::ULong reply_status);
    
    // TAO_IDL - Generated from
    // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/operation_ch.cpp:46
    
    virtual void push_loads_excep (
        ::Messaging::ExceptionHolder * excep_holder);
    
    // TAO_IDL - Generated from
    // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/operation_ch.cpp:46
    
    virtual void get_loads (
        const ::CosLoadBalancing::LoadList & ami_return_val);
    
    static void get_loads_reply_stub (
        TAO_InputCDR &_tao_reply_cdr,
        ::Messaging::ReplyHandler_ptr _tao_reply_handler,
        ::CORBA::ULong reply_status);
    
    // TAO_IDL - Generated from
    // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/operation_ch.cpp:46
    
    virtual void get_loads_excep (
        ::Messaging::ExceptionHolder * excep_holder);
    
    // TAO_IDL - Generated from
    // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/operation_ch.cpp:46
    
    virtual void next_member (
        ::CORBA::Object_ptr ami_return_val);
    
    static void next_member_reply_stub (
        TAO_InputCDR &_tao_reply_cdr,
        ::Messaging::ReplyHandler_ptr _tao_reply_handler,
        ::CORBA::ULong reply_status);
    
    // TAO_IDL - Generated from
    // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/operation_ch.cpp:46
    
    virtual void next_member_excep (
        ::Messaging::ExceptionHolder * excep_holder);
    
    // TAO_IDL - Generated from
    // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:216
    
    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  private:
    TAO::Collocation_Proxy_Broker *the_TAO_AMI_StrategyHandler_Proxy_Broker_;
  
  protected:
    // Concrete interface only.
    AMI_StrategyHandler (void);
    
    // These methods travese the inheritance tree and set the
    // parents piece of the given class in the right mode.
    virtual void CosLoadBalancing_AMI_StrategyHandler_setup_collocation (void);
    
    // Concrete non-local interface only.
    AMI_StrategyHandler (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    AMI_StrategyHandler (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);
    
    virtual ~AMI_StrategyHandler (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    AMI_StrategyHandler (const AMI_StrategyHandler &);
    
    void operator= (const AMI_StrategyHandler &);
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:49
  
  extern TAO_LoadBalancing_Export ::CORBA::TypeCode_ptr const _tc_AMI_StrategyHandler;
  
  // TAO_IDL - Generated from
  // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_typedef/typedef_ch.cpp:330
  
  typedef Strategy CustomStrategy;
  typedef Strategy_ptr CustomStrategy_ptr;
  typedef Strategy_var CustomStrategy_var;
  typedef Strategy_out CustomStrategy_out;
  
  
  // TAO_IDL - Generated from
  // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:49
  
  extern TAO_LoadBalancing_Export ::CORBA::TypeCode_ptr const _tc_CustomStrategy;
  
  // TAO_IDL - Generated from
  // be\be_type.cpp:269
  
  struct StrategyInfo;
  
  typedef
    TAO_Var_Var_T<
        StrategyInfo
      >
    StrategyInfo_var;
  
  typedef
    TAO_Out_T<
        StrategyInfo
      >
    StrategyInfo_out;
  
  // TAO_IDL - Generated from
  // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_structure/structure_ch.cpp:57
  
  struct TAO_LoadBalancing_Export StrategyInfo
  {
    typedef StrategyInfo_var _var_type;
    typedef StrategyInfo_out _out_type;
    
    static void _tao_any_destructor (void *);
    TAO::String_Manager name;
    CosLoadBalancing::Properties props;
  };
  
  // TAO_IDL - Generated from
  // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:49
  
  extern TAO_LoadBalancing_Export ::CORBA::TypeCode_ptr const _tc_StrategyInfo;

#if !defined (_COSLOADBALANCING_AMI_LOADALERTHANDLER___PTR_CH_)
#define _COSLOADBALANCING_AMI_LOADALERTHANDLER___PTR_CH_
  
  class AMI_LoadAlertHandler;
  typedef AMI_LoadAlertHandler *AMI_LoadAlertHandler_ptr;

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // be\be_interface.cpp:644

#if !defined (_COSLOADBALANCING_LOADALERT__VAR_OUT_CH_)
#define _COSLOADBALANCING_LOADALERT__VAR_OUT_CH_
  
  class LoadAlert;
  typedef LoadAlert *LoadAlert_ptr;
  
  typedef
    TAO_Objref_Var_T<
        LoadAlert
      >
    LoadAlert_var;
  
  typedef
    TAO_Objref_Out_T<
        LoadAlert
      >
    LoadAlert_out;

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:54

#if !defined (_COSLOADBALANCING_LOADALERT_CH_)
#define _COSLOADBALANCING_LOADALERT_CH_
  
  class TAO_LoadBalancing_Export LoadAlert
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<LoadAlert>;
    typedef LoadAlert_ptr _ptr_type;
    typedef LoadAlert_var _var_type;
    typedef LoadAlert_out _out_type;
    
    // The static operations.
    static LoadAlert_ptr _duplicate (LoadAlert_ptr obj);
    
    static void _tao_release (LoadAlert_ptr obj);
    
    static LoadAlert_ptr _narrow (::CORBA::Object_ptr obj);
    static LoadAlert_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static LoadAlert_ptr _nil (void)
    {
      return static_cast<LoadAlert_ptr> (0);
    }
    
    static void _tao_any_destructor (void *);
    
    // TAO_IDL - Generated from
    // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/operation_ch.cpp:46
    
    virtual void enable_alert (
        void);
    
    // TAO_IDL - Generated from
    // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/ami_ch.cpp:55
    
    virtual void sendc_enable_alert (
        ::CosLoadBalancing::AMI_LoadAlertHandler_ptr ami_handler);
    
    // TAO_IDL - Generated from
    // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/operation_ch.cpp:46
    
    virtual void disable_alert (
        void);
    
    // TAO_IDL - Generated from
    // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/ami_ch.cpp:55
    
    virtual void sendc_disable_alert (
        ::CosLoadBalancing::AMI_LoadAlertHandler_ptr ami_handler);
    
    // TAO_IDL - Generated from
    // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:216
    
    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  private:
    TAO::Collocation_Proxy_Broker *the_TAO_LoadAlert_Proxy_Broker_;
  
  protected:
    // Concrete interface only.
    LoadAlert (void);
    
    // These methods travese the inheritance tree and set the
    // parents piece of the given class in the right mode.
    virtual void CosLoadBalancing_LoadAlert_setup_collocation (void);
    
    // Concrete non-local interface only.
    LoadAlert (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    LoadAlert (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);
    
    virtual ~LoadAlert (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    LoadAlert (const LoadAlert &);
    
    void operator= (const LoadAlert &);
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:49
  
  extern TAO_LoadBalancing_Export ::CORBA::TypeCode_ptr const _tc_LoadAlert;
  
  // TAO_IDL - Generated from
  // be\be_interface.cpp:644

#if !defined (_COSLOADBALANCING_AMI_LOADALERTHANDLER__VAR_OUT_CH_)
#define _COSLOADBALANCING_AMI_LOADALERTHANDLER__VAR_OUT_CH_
  
  class AMI_LoadAlertHandler;
  typedef AMI_LoadAlertHandler *AMI_LoadAlertHandler_ptr;
  
  typedef
    TAO_Objref_Var_T<
        AMI_LoadAlertHandler
      >
    AMI_LoadAlertHandler_var;
  
  typedef
    TAO_Objref_Out_T<
        AMI_LoadAlertHandler
      >
    AMI_LoadAlertHandler_out;

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:54

#if !defined (_COSLOADBALANCING_AMI_LOADALERTHANDLER_CH_)
#define _COSLOADBALANCING_AMI_LOADALERTHANDLER_CH_
  
  class TAO_LoadBalancing_Export AMI_LoadAlertHandler
    : public virtual ::Messaging::ReplyHandler
  {
  public:
    friend class TAO::Narrow_Utils<AMI_LoadAlertHandler>;
    typedef AMI_LoadAlertHandler_ptr _ptr_type;
    typedef AMI_LoadAlertHandler_var _var_type;
    typedef AMI_LoadAlertHandler_out _out_type;
    
    // The static operations.
    static AMI_LoadAlertHandler_ptr _duplicate (AMI_LoadAlertHandler_ptr obj);
    
    static void _tao_release (AMI_LoadAlertHandler_ptr obj);
    
    static AMI_LoadAlertHandler_ptr _narrow (::CORBA::Object_ptr obj);
    static AMI_LoadAlertHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static AMI_LoadAlertHandler_ptr _nil (void)
    {
      return static_cast<AMI_LoadAlertHandler_ptr> (0);
    }
    
    static void _tao_any_destructor (void *);
    
    // TAO_IDL - Generated from
    // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/operation_ch.cpp:46
    
    virtual void enable_alert (
        void);
    
    static void enable_alert_reply_stub (
        TAO_InputCDR &_tao_reply_cdr,
        ::Messaging::ReplyHandler_ptr _tao_reply_handler,
        ::CORBA::ULong reply_status);
    
    // TAO_IDL - Generated from
    // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/operation_ch.cpp:46
    
    virtual void enable_alert_excep (
        ::Messaging::ExceptionHolder * excep_holder);
    
    // TAO_IDL - Generated from
    // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/operation_ch.cpp:46
    
    virtual void disable_alert (
        void);
    
    static void disable_alert_reply_stub (
        TAO_InputCDR &_tao_reply_cdr,
        ::Messaging::ReplyHandler_ptr _tao_reply_handler,
        ::CORBA::ULong reply_status);
    
    // TAO_IDL - Generated from
    // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/operation_ch.cpp:46
    
    virtual void disable_alert_excep (
        ::Messaging::ExceptionHolder * excep_holder);
    
    // TAO_IDL - Generated from
    // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:216
    
    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  private:
    TAO::Collocation_Proxy_Broker *the_TAO_AMI_LoadAlertHandler_Proxy_Broker_;
  
  protected:
    // Concrete interface only.
    AMI_LoadAlertHandler (void);
    
    // These methods travese the inheritance tree and set the
    // parents piece of the given class in the right mode.
    virtual void CosLoadBalancing_AMI_LoadAlertHandler_setup_collocation (void);
    
    // Concrete non-local interface only.
    AMI_LoadAlertHandler (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    AMI_LoadAlertHandler (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);
    
    virtual ~AMI_LoadAlertHandler (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    AMI_LoadAlertHandler (const AMI_LoadAlertHandler &);
    
    void operator= (const AMI_LoadAlertHandler &);
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:49
  
  extern TAO_LoadBalancing_Export ::CORBA::TypeCode_ptr const _tc_AMI_LoadAlertHandler;

#if !defined (_COSLOADBALANCING_AMI_LOADMONITORHANDLER___PTR_CH_)
#define _COSLOADBALANCING_AMI_LOADMONITORHANDLER___PTR_CH_
  
  class AMI_LoadMonitorHandler;
  typedef AMI_LoadMonitorHandler *AMI_LoadMonitorHandler_ptr;

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // be\be_interface.cpp:644

#if !defined (_COSLOADBALANCING_LOADMONITOR__VAR_OUT_CH_)
#define _COSLOADBALANCING_LOADMONITOR__VAR_OUT_CH_
  
  class LoadMonitor;
  typedef LoadMonitor *LoadMonitor_ptr;
  
  typedef
    TAO_Objref_Var_T<
        LoadMonitor
      >
    LoadMonitor_var;
  
  typedef
    TAO_Objref_Out_T<
        LoadMonitor
      >
    LoadMonitor_out;

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:54

#if !defined (_COSLOADBALANCING_LOADMONITOR_CH_)
#define _COSLOADBALANCING_LOADMONITOR_CH_
  
  class TAO_LoadBalancing_Export LoadMonitor
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<LoadMonitor>;
    typedef LoadMonitor_ptr _ptr_type;
    typedef LoadMonitor_var _var_type;
    typedef LoadMonitor_out _out_type;
    
    // The static operations.
    static LoadMonitor_ptr _duplicate (LoadMonitor_ptr obj);
    
    static void _tao_release (LoadMonitor_ptr obj);
    
    static LoadMonitor_ptr _narrow (::CORBA::Object_ptr obj);
    static LoadMonitor_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static LoadMonitor_ptr _nil (void)
    {
      return static_cast<LoadMonitor_ptr> (0);
    }
    
    static void _tao_any_destructor (void *);
    
    // TAO_IDL - Generated from
    // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/operation_ch.cpp:46
    
    virtual ::CosLoadBalancing::Location * the_location (
        void);
    
    // TAO_IDL - Generated from
    // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/ami_ch.cpp:55
    
    virtual void sendc_get_the_location (
        ::CosLoadBalancing::AMI_LoadMonitorHandler_ptr ami_handler);
    
    // TAO_IDL - Generated from
    // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/operation_ch.cpp:46
    
    virtual ::CosLoadBalancing::LoadList * loads (
        void);
    
    // TAO_IDL - Generated from
    // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/ami_ch.cpp:55
    
    virtual void sendc_get_loads (
        ::CosLoadBalancing::AMI_LoadMonitorHandler_ptr ami_handler);
    
    // TAO_IDL - Generated from
    // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:216
    
    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  private:
    TAO::Collocation_Proxy_Broker *the_TAO_LoadMonitor_Proxy_Broker_;
  
  protected:
    // Concrete interface only.
    LoadMonitor (void);
    
    // These methods travese the inheritance tree and set the
    // parents piece of the given class in the right mode.
    virtual void CosLoadBalancing_LoadMonitor_setup_collocation (void);
    
    // Concrete non-local interface only.
    LoadMonitor (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    LoadMonitor (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);
    
    virtual ~LoadMonitor (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    LoadMonitor (const LoadMonitor &);
    
    void operator= (const LoadMonitor &);
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:49
  
  extern TAO_LoadBalancing_Export ::CORBA::TypeCode_ptr const _tc_LoadMonitor;
  
  // TAO_IDL - Generated from
  // be\be_interface.cpp:644

#if !defined (_COSLOADBALANCING_AMI_LOADMONITORHANDLER__VAR_OUT_CH_)
#define _COSLOADBALANCING_AMI_LOADMONITORHANDLER__VAR_OUT_CH_
  
  class AMI_LoadMonitorHandler;
  typedef AMI_LoadMonitorHandler *AMI_LoadMonitorHandler_ptr;
  
  typedef
    TAO_Objref_Var_T<
        AMI_LoadMonitorHandler
      >
    AMI_LoadMonitorHandler_var;
  
  typedef
    TAO_Objref_Out_T<
        AMI_LoadMonitorHandler
      >
    AMI_LoadMonitorHandler_out;

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:54

#if !defined (_COSLOADBALANCING_AMI_LOADMONITORHANDLER_CH_)
#define _COSLOADBALANCING_AMI_LOADMONITORHANDLER_CH_
  
  class TAO_LoadBalancing_Export AMI_LoadMonitorHandler
    : public virtual ::Messaging::ReplyHandler
  {
  public:
    friend class TAO::Narrow_Utils<AMI_LoadMonitorHandler>;
    typedef AMI_LoadMonitorHandler_ptr _ptr_type;
    typedef AMI_LoadMonitorHandler_var _var_type;
    typedef AMI_LoadMonitorHandler_out _out_type;
    
    // The static operations.
    static AMI_LoadMonitorHandler_ptr _duplicate (AMI_LoadMonitorHandler_ptr obj);
    
    static void _tao_release (AMI_LoadMonitorHandler_ptr obj);
    
    static AMI_LoadMonitorHandler_ptr _narrow (::CORBA::Object_ptr obj);
    static AMI_LoadMonitorHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static AMI_LoadMonitorHandler_ptr _nil (void)
    {
      return static_cast<AMI_LoadMonitorHandler_ptr> (0);
    }
    
    static void _tao_any_destructor (void *);
    
    // TAO_IDL - Generated from
    // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/operation_ch.cpp:46
    
    virtual void get_the_location (
        const ::CosLoadBalancing::Location & ami_return_val);
    
    static void get_the_location_reply_stub (
        TAO_InputCDR &_tao_reply_cdr,
        ::Messaging::ReplyHandler_ptr _tao_reply_handler,
        ::CORBA::ULong reply_status);
    
    // TAO_IDL - Generated from
    // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/operation_ch.cpp:46
    
    virtual void get_the_location_excep (
        ::Messaging::ExceptionHolder * excep_holder);
    
    // TAO_IDL - Generated from
    // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/operation_ch.cpp:46
    
    virtual void get_loads (
        const ::CosLoadBalancing::LoadList & ami_return_val);
    
    static void get_loads_reply_stub (
        TAO_InputCDR &_tao_reply_cdr,
        ::Messaging::ReplyHandler_ptr _tao_reply_handler,
        ::CORBA::ULong reply_status);
    
    // TAO_IDL - Generated from
    // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/operation_ch.cpp:46
    
    virtual void get_loads_excep (
        ::Messaging::ExceptionHolder * excep_holder);
    
    // TAO_IDL - Generated from
    // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:216
    
    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  private:
    TAO::Collocation_Proxy_Broker *the_TAO_AMI_LoadMonitorHandler_Proxy_Broker_;
  
  protected:
    // Concrete interface only.
    AMI_LoadMonitorHandler (void);
    
    // These methods travese the inheritance tree and set the
    // parents piece of the given class in the right mode.
    virtual void CosLoadBalancing_AMI_LoadMonitorHandler_setup_collocation (void);
    
    // Concrete non-local interface only.
    AMI_LoadMonitorHandler (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    AMI_LoadMonitorHandler (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);
    
    virtual ~AMI_LoadMonitorHandler (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    AMI_LoadMonitorHandler (const AMI_LoadMonitorHandler &);
    
    void operator= (const AMI_LoadMonitorHandler &);
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:49
  
  extern TAO_LoadBalancing_Export ::CORBA::TypeCode_ptr const _tc_AMI_LoadMonitorHandler;

#if !defined (_COSLOADBALANCING_AMI_LOADMANAGERHANDLER___PTR_CH_)
#define _COSLOADBALANCING_AMI_LOADMANAGERHANDLER___PTR_CH_
  
  class AMI_LoadManagerHandler;
  typedef AMI_LoadManagerHandler *AMI_LoadManagerHandler_ptr;

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:54

#if !defined (_COSLOADBALANCING_LOADMANAGER_CH_)
#define _COSLOADBALANCING_LOADMANAGER_CH_
  
  class TAO_LoadBalancing_Export LoadManager
    : public virtual ::PortableGroup::PropertyManager,
      public virtual ::PortableGroup::ObjectGroupManager,
      public virtual ::PortableGroup::GenericFactory
  {
  public:
    friend class TAO::Narrow_Utils<LoadManager>;
    typedef LoadManager_ptr _ptr_type;
    typedef LoadManager_var _var_type;
    typedef LoadManager_out _out_type;
    
    // The static operations.
    static LoadManager_ptr _duplicate (LoadManager_ptr obj);
    
    static void _tao_release (LoadManager_ptr obj);
    
    static LoadManager_ptr _narrow (::CORBA::Object_ptr obj);
    static LoadManager_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static LoadManager_ptr _nil (void)
    {
      return static_cast<LoadManager_ptr> (0);
    }
    
    static void _tao_any_destructor (void *);
    
    // TAO_IDL - Generated from
    // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/operation_ch.cpp:46
    
    virtual void push_loads (
        const ::PortableGroup::Location & the_location,
        const ::CosLoadBalancing::LoadList & loads);
    
    // TAO_IDL - Generated from
    // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/ami_ch.cpp:55
    
    virtual void sendc_push_loads (
        ::CosLoadBalancing::AMI_LoadManagerHandler_ptr ami_handler,
        const ::PortableGroup::Location & the_location,
        const ::CosLoadBalancing::LoadList & loads);
    
    // TAO_IDL - Generated from
    // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/operation_ch.cpp:46
    
    virtual ::CosLoadBalancing::LoadList * get_loads (
        const ::PortableGroup::Location & the_location);
    
    // TAO_IDL - Generated from
    // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/ami_ch.cpp:55
    
    virtual void sendc_get_loads (
        ::CosLoadBalancing::AMI_LoadManagerHandler_ptr ami_handler,
        const ::PortableGroup::Location & the_location);
    
    // TAO_IDL - Generated from
    // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/operation_ch.cpp:46
    
    virtual void enable_alert (
        const ::PortableGroup::Location & the_location);
    
    // TAO_IDL - Generated from
    // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/ami_ch.cpp:55
    
    virtual void sendc_enable_alert (
        ::CosLoadBalancing::AMI_LoadManagerHandler_ptr ami_handler,
        const ::PortableGroup::Location & the_location);
    
    // TAO_IDL - Generated from
    // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/operation_ch.cpp:46
    
    virtual void disable_alert (
        const ::PortableGroup::Location & the_location);
    
    // TAO_IDL - Generated from
    // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/ami_ch.cpp:55
    
    virtual void sendc_disable_alert (
        ::CosLoadBalancing::AMI_LoadManagerHandler_ptr ami_handler,
        const ::PortableGroup::Location & the_location);
    
    // TAO_IDL - Generated from
    // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/operation_ch.cpp:46
    
    virtual void register_load_alert (
        const ::PortableGroup::Location & the_location,
        ::CosLoadBalancing::LoadAlert_ptr load_alert);
    
    // TAO_IDL - Generated from
    // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/ami_ch.cpp:55
    
    virtual void sendc_register_load_alert (
        ::CosLoadBalancing::AMI_LoadManagerHandler_ptr ami_handler,
        const ::PortableGroup::Location & the_location,
        ::CosLoadBalancing::LoadAlert_ptr load_alert);
    
    // TAO_IDL - Generated from
    // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/operation_ch.cpp:46
    
    virtual ::CosLoadBalancing::LoadAlert_ptr get_load_alert (
        const ::PortableGroup::Location & the_location);
    
    // TAO_IDL - Generated from
    // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/ami_ch.cpp:55
    
    virtual void sendc_get_load_alert (
        ::CosLoadBalancing::AMI_LoadManagerHandler_ptr ami_handler,
        const ::PortableGroup::Location & the_location);
    
    // TAO_IDL - Generated from
    // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/operation_ch.cpp:46
    
    virtual void remove_load_alert (
        const ::PortableGroup::Location & the_location);
    
    // TAO_IDL - Generated from
    // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/ami_ch.cpp:55
    
    virtual void sendc_remove_load_alert (
        ::CosLoadBalancing::AMI_LoadManagerHandler_ptr ami_handler,
        const ::PortableGroup::Location & the_location);
    
    // TAO_IDL - Generated from
    // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/operation_ch.cpp:46
    
    virtual void register_load_monitor (
        const ::PortableGroup::Location & the_location,
        ::CosLoadBalancing::LoadMonitor_ptr load_monitor);
    
    // TAO_IDL - Generated from
    // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/ami_ch.cpp:55
    
    virtual void sendc_register_load_monitor (
        ::CosLoadBalancing::AMI_LoadManagerHandler_ptr ami_handler,
        const ::PortableGroup::Location & the_location,
        ::CosLoadBalancing::LoadMonitor_ptr load_monitor);
    
    // TAO_IDL - Generated from
    // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/operation_ch.cpp:46
    
    virtual ::CosLoadBalancing::LoadMonitor_ptr get_load_monitor (
        const ::PortableGroup::Location & the_location);
    
    // TAO_IDL - Generated from
    // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/ami_ch.cpp:55
    
    virtual void sendc_get_load_monitor (
        ::CosLoadBalancing::AMI_LoadManagerHandler_ptr ami_handler,
        const ::PortableGroup::Location & the_location);
    
    // TAO_IDL - Generated from
    // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/operation_ch.cpp:46
    
    virtual void remove_load_monitor (
        const ::PortableGroup::Location & the_location);
    
    // TAO_IDL - Generated from
    // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/ami_ch.cpp:55
    
    virtual void sendc_remove_load_monitor (
        ::CosLoadBalancing::AMI_LoadManagerHandler_ptr ami_handler,
        const ::PortableGroup::Location & the_location);
    
    // TAO_IDL - Generated from
    // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:216
    
    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  private:
    TAO::Collocation_Proxy_Broker *the_TAO_LoadManager_Proxy_Broker_;
  
  protected:
    // Concrete interface only.
    LoadManager (void);
    
    // These methods travese the inheritance tree and set the
    // parents piece of the given class in the right mode.
    virtual void CosLoadBalancing_LoadManager_setup_collocation (void);
    
    // Concrete non-local interface only.
    LoadManager (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    LoadManager (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);
    
    virtual ~LoadManager (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    LoadManager (const LoadManager &);
    
    void operator= (const LoadManager &);
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:49
  
  extern TAO_LoadBalancing_Export ::CORBA::TypeCode_ptr const _tc_LoadManager;
  
  // TAO_IDL - Generated from
  // be\be_interface.cpp:644

#if !defined (_COSLOADBALANCING_AMI_LOADMANAGERHANDLER__VAR_OUT_CH_)
#define _COSLOADBALANCING_AMI_LOADMANAGERHANDLER__VAR_OUT_CH_
  
  class AMI_LoadManagerHandler;
  typedef AMI_LoadManagerHandler *AMI_LoadManagerHandler_ptr;
  
  typedef
    TAO_Objref_Var_T<
        AMI_LoadManagerHandler
      >
    AMI_LoadManagerHandler_var;
  
  typedef
    TAO_Objref_Out_T<
        AMI_LoadManagerHandler
      >
    AMI_LoadManagerHandler_out;

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:54

#if !defined (_COSLOADBALANCING_AMI_LOADMANAGERHANDLER_CH_)
#define _COSLOADBALANCING_AMI_LOADMANAGERHANDLER_CH_
  
  class TAO_LoadBalancing_Export AMI_LoadManagerHandler
    : public virtual ::PortableGroup::AMI_PropertyManagerHandler,
      public virtual ::PortableGroup::AMI_ObjectGroupManagerHandler,
      public virtual ::PortableGroup::AMI_GenericFactoryHandler
  {
  public:
    friend class TAO::Narrow_Utils<AMI_LoadManagerHandler>;
    typedef AMI_LoadManagerHandler_ptr _ptr_type;
    typedef AMI_LoadManagerHandler_var _var_type;
    typedef AMI_LoadManagerHandler_out _out_type;
    
    // The static operations.
    static AMI_LoadManagerHandler_ptr _duplicate (AMI_LoadManagerHandler_ptr obj);
    
    static void _tao_release (AMI_LoadManagerHandler_ptr obj);
    
    static AMI_LoadManagerHandler_ptr _narrow (::CORBA::Object_ptr obj);
    static AMI_LoadManagerHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static AMI_LoadManagerHandler_ptr _nil (void)
    {
      return static_cast<AMI_LoadManagerHandler_ptr> (0);
    }
    
    static void _tao_any_destructor (void *);
    
    // TAO_IDL - Generated from
    // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/operation_ch.cpp:46
    
    virtual void push_loads (
        void);
    
    static void push_loads_reply_stub (
        TAO_InputCDR &_tao_reply_cdr,
        ::Messaging::ReplyHandler_ptr _tao_reply_handler,
        ::CORBA::ULong reply_status);
    
    // TAO_IDL - Generated from
    // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/operation_ch.cpp:46
    
    virtual void push_loads_excep (
        ::Messaging::ExceptionHolder * excep_holder);
    
    // TAO_IDL - Generated from
    // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/operation_ch.cpp:46
    
    virtual void get_loads (
        const ::CosLoadBalancing::LoadList & ami_return_val);
    
    static void get_loads_reply_stub (
        TAO_InputCDR &_tao_reply_cdr,
        ::Messaging::ReplyHandler_ptr _tao_reply_handler,
        ::CORBA::ULong reply_status);
    
    // TAO_IDL - Generated from
    // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/operation_ch.cpp:46
    
    virtual void get_loads_excep (
        ::Messaging::ExceptionHolder * excep_holder);
    
    // TAO_IDL - Generated from
    // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/operation_ch.cpp:46
    
    virtual void enable_alert (
        void);
    
    static void enable_alert_reply_stub (
        TAO_InputCDR &_tao_reply_cdr,
        ::Messaging::ReplyHandler_ptr _tao_reply_handler,
        ::CORBA::ULong reply_status);
    
    // TAO_IDL - Generated from
    // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/operation_ch.cpp:46
    
    virtual void enable_alert_excep (
        ::Messaging::ExceptionHolder * excep_holder);
    
    // TAO_IDL - Generated from
    // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/operation_ch.cpp:46
    
    virtual void disable_alert (
        void);
    
    static void disable_alert_reply_stub (
        TAO_InputCDR &_tao_reply_cdr,
        ::Messaging::ReplyHandler_ptr _tao_reply_handler,
        ::CORBA::ULong reply_status);
    
    // TAO_IDL - Generated from
    // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/operation_ch.cpp:46
    
    virtual void disable_alert_excep (
        ::Messaging::ExceptionHolder * excep_holder);
    
    // TAO_IDL - Generated from
    // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/operation_ch.cpp:46
    
    virtual void register_load_alert (
        void);
    
    static void register_load_alert_reply_stub (
        TAO_InputCDR &_tao_reply_cdr,
        ::Messaging::ReplyHandler_ptr _tao_reply_handler,
        ::CORBA::ULong reply_status);
    
    // TAO_IDL - Generated from
    // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/operation_ch.cpp:46
    
    virtual void register_load_alert_excep (
        ::Messaging::ExceptionHolder * excep_holder);
    
    // TAO_IDL - Generated from
    // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/operation_ch.cpp:46
    
    virtual void get_load_alert (
        ::CosLoadBalancing::LoadAlert_ptr ami_return_val);
    
    static void get_load_alert_reply_stub (
        TAO_InputCDR &_tao_reply_cdr,
        ::Messaging::ReplyHandler_ptr _tao_reply_handler,
        ::CORBA::ULong reply_status);
    
    // TAO_IDL - Generated from
    // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/operation_ch.cpp:46
    
    virtual void get_load_alert_excep (
        ::Messaging::ExceptionHolder * excep_holder);
    
    // TAO_IDL - Generated from
    // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/operation_ch.cpp:46
    
    virtual void remove_load_alert (
        void);
    
    static void remove_load_alert_reply_stub (
        TAO_InputCDR &_tao_reply_cdr,
        ::Messaging::ReplyHandler_ptr _tao_reply_handler,
        ::CORBA::ULong reply_status);
    
    // TAO_IDL - Generated from
    // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/operation_ch.cpp:46
    
    virtual void remove_load_alert_excep (
        ::Messaging::ExceptionHolder * excep_holder);
    
    // TAO_IDL - Generated from
    // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/operation_ch.cpp:46
    
    virtual void register_load_monitor (
        void);
    
    static void register_load_monitor_reply_stub (
        TAO_InputCDR &_tao_reply_cdr,
        ::Messaging::ReplyHandler_ptr _tao_reply_handler,
        ::CORBA::ULong reply_status);
    
    // TAO_IDL - Generated from
    // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/operation_ch.cpp:46
    
    virtual void register_load_monitor_excep (
        ::Messaging::ExceptionHolder * excep_holder);
    
    // TAO_IDL - Generated from
    // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/operation_ch.cpp:46
    
    virtual void get_load_monitor (
        ::CosLoadBalancing::LoadMonitor_ptr ami_return_val);
    
    static void get_load_monitor_reply_stub (
        TAO_InputCDR &_tao_reply_cdr,
        ::Messaging::ReplyHandler_ptr _tao_reply_handler,
        ::CORBA::ULong reply_status);
    
    // TAO_IDL - Generated from
    // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/operation_ch.cpp:46
    
    virtual void get_load_monitor_excep (
        ::Messaging::ExceptionHolder * excep_holder);
    
    // TAO_IDL - Generated from
    // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/operation_ch.cpp:46
    
    virtual void remove_load_monitor (
        void);
    
    static void remove_load_monitor_reply_stub (
        TAO_InputCDR &_tao_reply_cdr,
        ::Messaging::ReplyHandler_ptr _tao_reply_handler,
        ::CORBA::ULong reply_status);
    
    // TAO_IDL - Generated from
    // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/operation_ch.cpp:46
    
    virtual void remove_load_monitor_excep (
        ::Messaging::ExceptionHolder * excep_holder);
    
    // TAO_IDL - Generated from
    // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:216
    
    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  private:
    TAO::Collocation_Proxy_Broker *the_TAO_AMI_LoadManagerHandler_Proxy_Broker_;
  
  protected:
    // Concrete interface only.
    AMI_LoadManagerHandler (void);
    
    // These methods travese the inheritance tree and set the
    // parents piece of the given class in the right mode.
    virtual void CosLoadBalancing_AMI_LoadManagerHandler_setup_collocation (void);
    
    // Concrete non-local interface only.
    AMI_LoadManagerHandler (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    AMI_LoadManagerHandler (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);
    
    virtual ~AMI_LoadManagerHandler (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    AMI_LoadManagerHandler (const AMI_LoadManagerHandler &);
    
    void operator= (const AMI_LoadManagerHandler &);
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:49
  
  extern TAO_LoadBalancing_Export ::CORBA::TypeCode_ptr const _tc_AMI_LoadManagerHandler;

// TAO_IDL - Generated from
// d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_module/module_ch.cpp:78

} // module CosLoadBalancing

// Proxy Broker Factory function pointer declarations.

// TAO_IDL - Generated from
// d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_root/root.cpp:139

extern TAO_LoadBalancing_Export
TAO::Collocation_Proxy_Broker *
(*CosLoadBalancing__TAO_Strategy_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj
  );

extern TAO_LoadBalancing_Export
TAO::Collocation_Proxy_Broker *
(*CosLoadBalancing__TAO_AMI_StrategyHandler_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj
  );

extern TAO_LoadBalancing_Export
TAO::Collocation_Proxy_Broker *
(*CosLoadBalancing__TAO_LoadAlert_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj
  );

extern TAO_LoadBalancing_Export
TAO::Collocation_Proxy_Broker *
(*CosLoadBalancing__TAO_AMI_LoadAlertHandler_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj
  );

extern TAO_LoadBalancing_Export
TAO::Collocation_Proxy_Broker *
(*CosLoadBalancing__TAO_LoadMonitor_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj
  );

extern TAO_LoadBalancing_Export
TAO::Collocation_Proxy_Broker *
(*CosLoadBalancing__TAO_AMI_LoadMonitorHandler_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj
  );

extern TAO_LoadBalancing_Export
TAO::Collocation_Proxy_Broker *
(*CosLoadBalancing__TAO_LoadManager_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj
  );

extern TAO_LoadBalancing_Export
TAO::Collocation_Proxy_Broker *
(*CosLoadBalancing__TAO_AMI_LoadManagerHandler_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj
  );

// TAO_IDL - Generated from
// be\be_visitor_traits.cpp:64


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{

#if !defined (_COSLOADBALANCING_STRATEGY__TRAITS_)
#define _COSLOADBALANCING_STRATEGY__TRAITS_
  
  template<>
  struct TAO_LoadBalancing_Export Objref_Traits< ::CosLoadBalancing::Strategy>
  {
    static ::CosLoadBalancing::Strategy_ptr duplicate (
        ::CosLoadBalancing::Strategy_ptr p
      );
    static void release (
        ::CosLoadBalancing::Strategy_ptr p
      );
    static ::CosLoadBalancing::Strategy_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::CosLoadBalancing::Strategy_ptr p,
        TAO_OutputCDR & cdr
      );
  };

#endif /* end #if !defined */

#if !defined (_COSLOADBALANCING_AMI_STRATEGYHANDLER__TRAITS_)
#define _COSLOADBALANCING_AMI_STRATEGYHANDLER__TRAITS_
  
  template<>
  struct TAO_LoadBalancing_Export Objref_Traits< ::CosLoadBalancing::AMI_StrategyHandler>
  {
    static ::CosLoadBalancing::AMI_StrategyHandler_ptr duplicate (
        ::CosLoadBalancing::AMI_StrategyHandler_ptr p
      );
    static void release (
        ::CosLoadBalancing::AMI_StrategyHandler_ptr p
      );
    static ::CosLoadBalancing::AMI_StrategyHandler_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::CosLoadBalancing::AMI_StrategyHandler_ptr p,
        TAO_OutputCDR & cdr
      );
  };

#endif /* end #if !defined */

#if !defined (_COSLOADBALANCING_LOADALERT__TRAITS_)
#define _COSLOADBALANCING_LOADALERT__TRAITS_
  
  template<>
  struct TAO_LoadBalancing_Export Objref_Traits< ::CosLoadBalancing::LoadAlert>
  {
    static ::CosLoadBalancing::LoadAlert_ptr duplicate (
        ::CosLoadBalancing::LoadAlert_ptr p
      );
    static void release (
        ::CosLoadBalancing::LoadAlert_ptr p
      );
    static ::CosLoadBalancing::LoadAlert_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::CosLoadBalancing::LoadAlert_ptr p,
        TAO_OutputCDR & cdr
      );
  };

#endif /* end #if !defined */

#if !defined (_COSLOADBALANCING_AMI_LOADALERTHANDLER__TRAITS_)
#define _COSLOADBALANCING_AMI_LOADALERTHANDLER__TRAITS_
  
  template<>
  struct TAO_LoadBalancing_Export Objref_Traits< ::CosLoadBalancing::AMI_LoadAlertHandler>
  {
    static ::CosLoadBalancing::AMI_LoadAlertHandler_ptr duplicate (
        ::CosLoadBalancing::AMI_LoadAlertHandler_ptr p
      );
    static void release (
        ::CosLoadBalancing::AMI_LoadAlertHandler_ptr p
      );
    static ::CosLoadBalancing::AMI_LoadAlertHandler_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::CosLoadBalancing::AMI_LoadAlertHandler_ptr p,
        TAO_OutputCDR & cdr
      );
  };

#endif /* end #if !defined */

#if !defined (_COSLOADBALANCING_LOADMONITOR__TRAITS_)
#define _COSLOADBALANCING_LOADMONITOR__TRAITS_
  
  template<>
  struct TAO_LoadBalancing_Export Objref_Traits< ::CosLoadBalancing::LoadMonitor>
  {
    static ::CosLoadBalancing::LoadMonitor_ptr duplicate (
        ::CosLoadBalancing::LoadMonitor_ptr p
      );
    static void release (
        ::CosLoadBalancing::LoadMonitor_ptr p
      );
    static ::CosLoadBalancing::LoadMonitor_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::CosLoadBalancing::LoadMonitor_ptr p,
        TAO_OutputCDR & cdr
      );
  };

#endif /* end #if !defined */

#if !defined (_COSLOADBALANCING_AMI_LOADMONITORHANDLER__TRAITS_)
#define _COSLOADBALANCING_AMI_LOADMONITORHANDLER__TRAITS_
  
  template<>
  struct TAO_LoadBalancing_Export Objref_Traits< ::CosLoadBalancing::AMI_LoadMonitorHandler>
  {
    static ::CosLoadBalancing::AMI_LoadMonitorHandler_ptr duplicate (
        ::CosLoadBalancing::AMI_LoadMonitorHandler_ptr p
      );
    static void release (
        ::CosLoadBalancing::AMI_LoadMonitorHandler_ptr p
      );
    static ::CosLoadBalancing::AMI_LoadMonitorHandler_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::CosLoadBalancing::AMI_LoadMonitorHandler_ptr p,
        TAO_OutputCDR & cdr
      );
  };

#endif /* end #if !defined */

#if !defined (_COSLOADBALANCING_LOADMANAGER__TRAITS_)
#define _COSLOADBALANCING_LOADMANAGER__TRAITS_
  
  template<>
  struct TAO_LoadBalancing_Export Objref_Traits< ::CosLoadBalancing::LoadManager>
  {
    static ::CosLoadBalancing::LoadManager_ptr duplicate (
        ::CosLoadBalancing::LoadManager_ptr p
      );
    static void release (
        ::CosLoadBalancing::LoadManager_ptr p
      );
    static ::CosLoadBalancing::LoadManager_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::CosLoadBalancing::LoadManager_ptr p,
        TAO_OutputCDR & cdr
      );
  };

#endif /* end #if !defined */

#if !defined (_COSLOADBALANCING_AMI_LOADMANAGERHANDLER__TRAITS_)
#define _COSLOADBALANCING_AMI_LOADMANAGERHANDLER__TRAITS_
  
  template<>
  struct TAO_LoadBalancing_Export Objref_Traits< ::CosLoadBalancing::AMI_LoadManagerHandler>
  {
    static ::CosLoadBalancing::AMI_LoadManagerHandler_ptr duplicate (
        ::CosLoadBalancing::AMI_LoadManagerHandler_ptr p
      );
    static void release (
        ::CosLoadBalancing::AMI_LoadManagerHandler_ptr p
      );
    static ::CosLoadBalancing::AMI_LoadManagerHandler_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::CosLoadBalancing::AMI_LoadManagerHandler_ptr p,
        TAO_OutputCDR & cdr
      );
  };

#endif /* end #if !defined */
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_structure/any_op_ch.cpp:53



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_LoadBalancing_Export void operator<<= (::CORBA::Any &, const CosLoadBalancing::Load &); // copying version
TAO_LoadBalancing_Export void operator<<= (::CORBA::Any &, CosLoadBalancing::Load*); // noncopying version
TAO_LoadBalancing_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CosLoadBalancing::Load *&); // deprecated
TAO_LoadBalancing_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const CosLoadBalancing::Load *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_sequence/any_op_ch.cpp:53



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_LoadBalancing_Export void operator<<= ( ::CORBA::Any &, const CosLoadBalancing::LoadList &); // copying version
TAO_LoadBalancing_Export void operator<<= ( ::CORBA::Any &, CosLoadBalancing::LoadList*); // noncopying version
TAO_LoadBalancing_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CosLoadBalancing::LoadList *&); // deprecated
TAO_LoadBalancing_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const CosLoadBalancing::LoadList *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_exception/any_op_ch.cpp:53

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_LoadBalancing_Export void operator<<= (::CORBA::Any &, const CosLoadBalancing::MonitorAlreadyPresent &); // copying version
TAO_LoadBalancing_Export void operator<<= (::CORBA::Any &, CosLoadBalancing::MonitorAlreadyPresent*); // noncopying version
TAO_LoadBalancing_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CosLoadBalancing::MonitorAlreadyPresent *&); // deprecated
TAO_LoadBalancing_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const CosLoadBalancing::MonitorAlreadyPresent *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_exception/any_op_ch.cpp:53

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_LoadBalancing_Export void operator<<= (::CORBA::Any &, const CosLoadBalancing::LocationNotFound &); // copying version
TAO_LoadBalancing_Export void operator<<= (::CORBA::Any &, CosLoadBalancing::LocationNotFound*); // noncopying version
TAO_LoadBalancing_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CosLoadBalancing::LocationNotFound *&); // deprecated
TAO_LoadBalancing_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const CosLoadBalancing::LocationNotFound *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_exception/any_op_ch.cpp:53

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_LoadBalancing_Export void operator<<= (::CORBA::Any &, const CosLoadBalancing::LoadAlertNotFound &); // copying version
TAO_LoadBalancing_Export void operator<<= (::CORBA::Any &, CosLoadBalancing::LoadAlertNotFound*); // noncopying version
TAO_LoadBalancing_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CosLoadBalancing::LoadAlertNotFound *&); // deprecated
TAO_LoadBalancing_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const CosLoadBalancing::LoadAlertNotFound *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_exception/any_op_ch.cpp:53

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_LoadBalancing_Export void operator<<= (::CORBA::Any &, const CosLoadBalancing::LoadAlertAlreadyPresent &); // copying version
TAO_LoadBalancing_Export void operator<<= (::CORBA::Any &, CosLoadBalancing::LoadAlertAlreadyPresent*); // noncopying version
TAO_LoadBalancing_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CosLoadBalancing::LoadAlertAlreadyPresent *&); // deprecated
TAO_LoadBalancing_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const CosLoadBalancing::LoadAlertAlreadyPresent *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_exception/any_op_ch.cpp:53

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_LoadBalancing_Export void operator<<= (::CORBA::Any &, const CosLoadBalancing::LoadAlertNotAdded &); // copying version
TAO_LoadBalancing_Export void operator<<= (::CORBA::Any &, CosLoadBalancing::LoadAlertNotAdded*); // noncopying version
TAO_LoadBalancing_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CosLoadBalancing::LoadAlertNotAdded *&); // deprecated
TAO_LoadBalancing_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const CosLoadBalancing::LoadAlertNotAdded *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_exception/any_op_ch.cpp:53

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_LoadBalancing_Export void operator<<= (::CORBA::Any &, const CosLoadBalancing::StrategyNotAdaptive &); // copying version
TAO_LoadBalancing_Export void operator<<= (::CORBA::Any &, CosLoadBalancing::StrategyNotAdaptive*); // noncopying version
TAO_LoadBalancing_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CosLoadBalancing::StrategyNotAdaptive *&); // deprecated
TAO_LoadBalancing_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const CosLoadBalancing::StrategyNotAdaptive *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_interface/any_op_ch.cpp:54



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosLoadBalancing
{
  TAO_LoadBalancing_Export void operator<<= ( ::CORBA::Any &, Strategy_ptr); // copying
  TAO_LoadBalancing_Export void operator<<= ( ::CORBA::Any &, Strategy_ptr *); // non-copying
  TAO_LoadBalancing_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Strategy_ptr &);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_LoadBalancing_Export void operator<<= (::CORBA::Any &, CosLoadBalancing::Strategy_ptr); // copying
TAO_LoadBalancing_Export void operator<<= (::CORBA::Any &, CosLoadBalancing::Strategy_ptr *); // non-copying
TAO_LoadBalancing_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CosLoadBalancing::Strategy_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_interface/any_op_ch.cpp:54



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosLoadBalancing
{
  TAO_LoadBalancing_Export void operator<<= ( ::CORBA::Any &, AMI_StrategyHandler_ptr); // copying
  TAO_LoadBalancing_Export void operator<<= ( ::CORBA::Any &, AMI_StrategyHandler_ptr *); // non-copying
  TAO_LoadBalancing_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMI_StrategyHandler_ptr &);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_LoadBalancing_Export void operator<<= (::CORBA::Any &, CosLoadBalancing::AMI_StrategyHandler_ptr); // copying
TAO_LoadBalancing_Export void operator<<= (::CORBA::Any &, CosLoadBalancing::AMI_StrategyHandler_ptr *); // non-copying
TAO_LoadBalancing_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CosLoadBalancing::AMI_StrategyHandler_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_structure/any_op_ch.cpp:53



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_LoadBalancing_Export void operator<<= (::CORBA::Any &, const CosLoadBalancing::StrategyInfo &); // copying version
TAO_LoadBalancing_Export void operator<<= (::CORBA::Any &, CosLoadBalancing::StrategyInfo*); // noncopying version
TAO_LoadBalancing_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CosLoadBalancing::StrategyInfo *&); // deprecated
TAO_LoadBalancing_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const CosLoadBalancing::StrategyInfo *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_interface/any_op_ch.cpp:54



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosLoadBalancing
{
  TAO_LoadBalancing_Export void operator<<= ( ::CORBA::Any &, LoadAlert_ptr); // copying
  TAO_LoadBalancing_Export void operator<<= ( ::CORBA::Any &, LoadAlert_ptr *); // non-copying
  TAO_LoadBalancing_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, LoadAlert_ptr &);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_LoadBalancing_Export void operator<<= (::CORBA::Any &, CosLoadBalancing::LoadAlert_ptr); // copying
TAO_LoadBalancing_Export void operator<<= (::CORBA::Any &, CosLoadBalancing::LoadAlert_ptr *); // non-copying
TAO_LoadBalancing_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CosLoadBalancing::LoadAlert_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_interface/any_op_ch.cpp:54



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosLoadBalancing
{
  TAO_LoadBalancing_Export void operator<<= ( ::CORBA::Any &, AMI_LoadAlertHandler_ptr); // copying
  TAO_LoadBalancing_Export void operator<<= ( ::CORBA::Any &, AMI_LoadAlertHandler_ptr *); // non-copying
  TAO_LoadBalancing_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMI_LoadAlertHandler_ptr &);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_LoadBalancing_Export void operator<<= (::CORBA::Any &, CosLoadBalancing::AMI_LoadAlertHandler_ptr); // copying
TAO_LoadBalancing_Export void operator<<= (::CORBA::Any &, CosLoadBalancing::AMI_LoadAlertHandler_ptr *); // non-copying
TAO_LoadBalancing_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CosLoadBalancing::AMI_LoadAlertHandler_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_interface/any_op_ch.cpp:54



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosLoadBalancing
{
  TAO_LoadBalancing_Export void operator<<= ( ::CORBA::Any &, LoadMonitor_ptr); // copying
  TAO_LoadBalancing_Export void operator<<= ( ::CORBA::Any &, LoadMonitor_ptr *); // non-copying
  TAO_LoadBalancing_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, LoadMonitor_ptr &);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_LoadBalancing_Export void operator<<= (::CORBA::Any &, CosLoadBalancing::LoadMonitor_ptr); // copying
TAO_LoadBalancing_Export void operator<<= (::CORBA::Any &, CosLoadBalancing::LoadMonitor_ptr *); // non-copying
TAO_LoadBalancing_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CosLoadBalancing::LoadMonitor_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_interface/any_op_ch.cpp:54



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosLoadBalancing
{
  TAO_LoadBalancing_Export void operator<<= ( ::CORBA::Any &, AMI_LoadMonitorHandler_ptr); // copying
  TAO_LoadBalancing_Export void operator<<= ( ::CORBA::Any &, AMI_LoadMonitorHandler_ptr *); // non-copying
  TAO_LoadBalancing_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMI_LoadMonitorHandler_ptr &);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_LoadBalancing_Export void operator<<= (::CORBA::Any &, CosLoadBalancing::AMI_LoadMonitorHandler_ptr); // copying
TAO_LoadBalancing_Export void operator<<= (::CORBA::Any &, CosLoadBalancing::AMI_LoadMonitorHandler_ptr *); // non-copying
TAO_LoadBalancing_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CosLoadBalancing::AMI_LoadMonitorHandler_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_interface/any_op_ch.cpp:54



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosLoadBalancing
{
  TAO_LoadBalancing_Export void operator<<= ( ::CORBA::Any &, LoadManager_ptr); // copying
  TAO_LoadBalancing_Export void operator<<= ( ::CORBA::Any &, LoadManager_ptr *); // non-copying
  TAO_LoadBalancing_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, LoadManager_ptr &);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_LoadBalancing_Export void operator<<= (::CORBA::Any &, CosLoadBalancing::LoadManager_ptr); // copying
TAO_LoadBalancing_Export void operator<<= (::CORBA::Any &, CosLoadBalancing::LoadManager_ptr *); // non-copying
TAO_LoadBalancing_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CosLoadBalancing::LoadManager_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_interface/any_op_ch.cpp:54



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosLoadBalancing
{
  TAO_LoadBalancing_Export void operator<<= ( ::CORBA::Any &, AMI_LoadManagerHandler_ptr); // copying
  TAO_LoadBalancing_Export void operator<<= ( ::CORBA::Any &, AMI_LoadManagerHandler_ptr *); // non-copying
  TAO_LoadBalancing_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMI_LoadManagerHandler_ptr &);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_LoadBalancing_Export void operator<<= (::CORBA::Any &, CosLoadBalancing::AMI_LoadManagerHandler_ptr); // copying
TAO_LoadBalancing_Export void operator<<= (::CORBA::Any &, CosLoadBalancing::AMI_LoadManagerHandler_ptr *); // non-copying
TAO_LoadBalancing_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CosLoadBalancing::AMI_LoadManagerHandler_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_structure/cdr_op_ch.cpp:54



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_LoadBalancing_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const CosLoadBalancing::Load &);
TAO_LoadBalancing_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, CosLoadBalancing::Load &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_sequence/cdr_op_ch.cpp:71

#if !defined _TAO_CDR_OP_CosLoadBalancing_LoadList_H_
#define _TAO_CDR_OP_CosLoadBalancing_LoadList_H_

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_LoadBalancing_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosLoadBalancing::LoadList &_tao_sequence
  );
TAO_LoadBalancing_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosLoadBalancing::LoadList &_tao_sequence
  );
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif /* _TAO_CDR_OP_CosLoadBalancing_LoadList_H_ */

// TAO_IDL - Generated from
// d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_exception/cdr_op_ch.cpp:52

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_LoadBalancing_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const CosLoadBalancing::MonitorAlreadyPresent &);
TAO_LoadBalancing_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, CosLoadBalancing::MonitorAlreadyPresent &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_exception/cdr_op_ch.cpp:52

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_LoadBalancing_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const CosLoadBalancing::LocationNotFound &);
TAO_LoadBalancing_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, CosLoadBalancing::LocationNotFound &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_exception/cdr_op_ch.cpp:52

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_LoadBalancing_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const CosLoadBalancing::LoadAlertNotFound &);
TAO_LoadBalancing_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, CosLoadBalancing::LoadAlertNotFound &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_exception/cdr_op_ch.cpp:52

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_LoadBalancing_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const CosLoadBalancing::LoadAlertAlreadyPresent &);
TAO_LoadBalancing_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, CosLoadBalancing::LoadAlertAlreadyPresent &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_exception/cdr_op_ch.cpp:52

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_LoadBalancing_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const CosLoadBalancing::LoadAlertNotAdded &);
TAO_LoadBalancing_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, CosLoadBalancing::LoadAlertNotAdded &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_exception/cdr_op_ch.cpp:52

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_LoadBalancing_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const CosLoadBalancing::StrategyNotAdaptive &);
TAO_LoadBalancing_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, CosLoadBalancing::StrategyNotAdaptive &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_interface/cdr_op_ch.cpp:55


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_LoadBalancing_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const CosLoadBalancing::Strategy_ptr );
TAO_LoadBalancing_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, CosLoadBalancing::Strategy_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_interface/cdr_op_ch.cpp:55


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_LoadBalancing_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const CosLoadBalancing::AMI_StrategyHandler_ptr );
TAO_LoadBalancing_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, CosLoadBalancing::AMI_StrategyHandler_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_structure/cdr_op_ch.cpp:54



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_LoadBalancing_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const CosLoadBalancing::StrategyInfo &);
TAO_LoadBalancing_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, CosLoadBalancing::StrategyInfo &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_interface/cdr_op_ch.cpp:55


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_LoadBalancing_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const CosLoadBalancing::LoadAlert_ptr );
TAO_LoadBalancing_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, CosLoadBalancing::LoadAlert_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_interface/cdr_op_ch.cpp:55


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_LoadBalancing_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const CosLoadBalancing::AMI_LoadAlertHandler_ptr );
TAO_LoadBalancing_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, CosLoadBalancing::AMI_LoadAlertHandler_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_interface/cdr_op_ch.cpp:55


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_LoadBalancing_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const CosLoadBalancing::LoadMonitor_ptr );
TAO_LoadBalancing_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, CosLoadBalancing::LoadMonitor_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_interface/cdr_op_ch.cpp:55


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_LoadBalancing_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const CosLoadBalancing::AMI_LoadMonitorHandler_ptr );
TAO_LoadBalancing_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, CosLoadBalancing::AMI_LoadMonitorHandler_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_interface/cdr_op_ch.cpp:55


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_LoadBalancing_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const CosLoadBalancing::LoadManager_ptr );
TAO_LoadBalancing_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, CosLoadBalancing::LoadManager_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_interface/cdr_op_ch.cpp:55


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_LoadBalancing_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const CosLoadBalancing::AMI_LoadManagerHandler_ptr );
TAO_LoadBalancing_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, CosLoadBalancing::AMI_LoadManagerHandler_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// be\be_codegen.cpp:1228


TAO_END_VERSIONED_NAMESPACE_DECL

#if defined (__ACE_INLINE__)
#include "CosLoadBalancingC.inl"
#endif /* defined INLINE */

#include /**/ "ace/post.h"

#endif /* ifndef */


