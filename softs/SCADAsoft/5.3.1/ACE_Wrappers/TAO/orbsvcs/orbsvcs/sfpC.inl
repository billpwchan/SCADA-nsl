// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler v1.6a_p10 ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
// and
//       Institute for Software Integrated Systems
//       Vanderbilt University
//       Nashville, TN
//       USA
//       http://www.isis.vanderbilt.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_array/array_ci.cpp:159

ACE_INLINE
void
TAO::Array_Traits<flowProtocol::frameHeader::_magic_number_forany>::free (
    flowProtocol::frameHeader::_magic_number_slice * _tao_slice
  )
{
  flowProtocol::frameHeader::_magic_number_free (_tao_slice);
}

ACE_INLINE
flowProtocol::frameHeader::_magic_number_slice *
TAO::Array_Traits<flowProtocol::frameHeader::_magic_number_forany>::dup (
    const flowProtocol::frameHeader::_magic_number_slice * _tao_slice
  )
{
  return flowProtocol::frameHeader::_magic_number_dup (_tao_slice);
}

ACE_INLINE
void
TAO::Array_Traits<flowProtocol::frameHeader::_magic_number_forany>::copy (
    flowProtocol::frameHeader::_magic_number_slice * _tao_to,
    const flowProtocol::frameHeader::_magic_number_slice * _tao_from
  )
{
  flowProtocol::frameHeader::_magic_number_copy (_tao_to, _tao_from);
}

ACE_INLINE
void
TAO::Array_Traits<flowProtocol::frameHeader::_magic_number_forany>::zero (
    flowProtocol::frameHeader::_magic_number_slice * _tao_slice
  )
{
  // Zero each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 4; ++i0)
    {
      _tao_slice[i0] = ::CORBA::Char ();
    }
}

ACE_INLINE
flowProtocol::frameHeader::_magic_number_slice *
TAO::Array_Traits<flowProtocol::frameHeader::_magic_number_forany>::alloc (void)
{
  return flowProtocol::frameHeader::_magic_number_alloc ();
}


// TAO_IDL - Generated from
// d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_array/array_ci.cpp:159

ACE_INLINE
void
TAO::Array_Traits<flowProtocol::fragment::_magic_number_forany>::free (
    flowProtocol::fragment::_magic_number_slice * _tao_slice
  )
{
  flowProtocol::fragment::_magic_number_free (_tao_slice);
}

ACE_INLINE
flowProtocol::fragment::_magic_number_slice *
TAO::Array_Traits<flowProtocol::fragment::_magic_number_forany>::dup (
    const flowProtocol::fragment::_magic_number_slice * _tao_slice
  )
{
  return flowProtocol::fragment::_magic_number_dup (_tao_slice);
}

ACE_INLINE
void
TAO::Array_Traits<flowProtocol::fragment::_magic_number_forany>::copy (
    flowProtocol::fragment::_magic_number_slice * _tao_to,
    const flowProtocol::fragment::_magic_number_slice * _tao_from
  )
{
  flowProtocol::fragment::_magic_number_copy (_tao_to, _tao_from);
}

ACE_INLINE
void
TAO::Array_Traits<flowProtocol::fragment::_magic_number_forany>::zero (
    flowProtocol::fragment::_magic_number_slice * _tao_slice
  )
{
  // Zero each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 4; ++i0)
    {
      _tao_slice[i0] = ::CORBA::Char ();
    }
}

ACE_INLINE
flowProtocol::fragment::_magic_number_slice *
TAO::Array_Traits<flowProtocol::fragment::_magic_number_forany>::alloc (void)
{
  return flowProtocol::fragment::_magic_number_alloc ();
}


// TAO_IDL - Generated from
// d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_array/array_ci.cpp:159

ACE_INLINE
void
TAO::Array_Traits<flowProtocol::Start::_magic_number_forany>::free (
    flowProtocol::Start::_magic_number_slice * _tao_slice
  )
{
  flowProtocol::Start::_magic_number_free (_tao_slice);
}

ACE_INLINE
flowProtocol::Start::_magic_number_slice *
TAO::Array_Traits<flowProtocol::Start::_magic_number_forany>::dup (
    const flowProtocol::Start::_magic_number_slice * _tao_slice
  )
{
  return flowProtocol::Start::_magic_number_dup (_tao_slice);
}

ACE_INLINE
void
TAO::Array_Traits<flowProtocol::Start::_magic_number_forany>::copy (
    flowProtocol::Start::_magic_number_slice * _tao_to,
    const flowProtocol::Start::_magic_number_slice * _tao_from
  )
{
  flowProtocol::Start::_magic_number_copy (_tao_to, _tao_from);
}

ACE_INLINE
void
TAO::Array_Traits<flowProtocol::Start::_magic_number_forany>::zero (
    flowProtocol::Start::_magic_number_slice * _tao_slice
  )
{
  // Zero each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 4; ++i0)
    {
      _tao_slice[i0] = ::CORBA::Char ();
    }
}

ACE_INLINE
flowProtocol::Start::_magic_number_slice *
TAO::Array_Traits<flowProtocol::Start::_magic_number_forany>::alloc (void)
{
  return flowProtocol::Start::_magic_number_alloc ();
}


// TAO_IDL - Generated from
// d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_array/array_ci.cpp:159

ACE_INLINE
void
TAO::Array_Traits<flowProtocol::StartReply::_magic_number_forany>::free (
    flowProtocol::StartReply::_magic_number_slice * _tao_slice
  )
{
  flowProtocol::StartReply::_magic_number_free (_tao_slice);
}

ACE_INLINE
flowProtocol::StartReply::_magic_number_slice *
TAO::Array_Traits<flowProtocol::StartReply::_magic_number_forany>::dup (
    const flowProtocol::StartReply::_magic_number_slice * _tao_slice
  )
{
  return flowProtocol::StartReply::_magic_number_dup (_tao_slice);
}

ACE_INLINE
void
TAO::Array_Traits<flowProtocol::StartReply::_magic_number_forany>::copy (
    flowProtocol::StartReply::_magic_number_slice * _tao_to,
    const flowProtocol::StartReply::_magic_number_slice * _tao_from
  )
{
  flowProtocol::StartReply::_magic_number_copy (_tao_to, _tao_from);
}

ACE_INLINE
void
TAO::Array_Traits<flowProtocol::StartReply::_magic_number_forany>::zero (
    flowProtocol::StartReply::_magic_number_slice * _tao_slice
  )
{
  // Zero each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 4; ++i0)
    {
      _tao_slice[i0] = ::CORBA::Char ();
    }
}

ACE_INLINE
flowProtocol::StartReply::_magic_number_slice *
TAO::Array_Traits<flowProtocol::StartReply::_magic_number_forany>::alloc (void)
{
  return flowProtocol::StartReply::_magic_number_alloc ();
}


// TAO_IDL - Generated from
// d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_array/array_ci.cpp:159

ACE_INLINE
void
TAO::Array_Traits<flowProtocol::credit::_magic_number_forany>::free (
    flowProtocol::credit::_magic_number_slice * _tao_slice
  )
{
  flowProtocol::credit::_magic_number_free (_tao_slice);
}

ACE_INLINE
flowProtocol::credit::_magic_number_slice *
TAO::Array_Traits<flowProtocol::credit::_magic_number_forany>::dup (
    const flowProtocol::credit::_magic_number_slice * _tao_slice
  )
{
  return flowProtocol::credit::_magic_number_dup (_tao_slice);
}

ACE_INLINE
void
TAO::Array_Traits<flowProtocol::credit::_magic_number_forany>::copy (
    flowProtocol::credit::_magic_number_slice * _tao_to,
    const flowProtocol::credit::_magic_number_slice * _tao_from
  )
{
  flowProtocol::credit::_magic_number_copy (_tao_to, _tao_from);
}

ACE_INLINE
void
TAO::Array_Traits<flowProtocol::credit::_magic_number_forany>::zero (
    flowProtocol::credit::_magic_number_slice * _tao_slice
  )
{
  // Zero each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 4; ++i0)
    {
      _tao_slice[i0] = ::CORBA::Char ();
    }
}

ACE_INLINE
flowProtocol::credit::_magic_number_slice *
TAO::Array_Traits<flowProtocol::credit::_magic_number_forany>::alloc (void)
{
  return flowProtocol::credit::_magic_number_alloc ();
}



TAO_END_VERSIONED_NAMESPACE_DECL


