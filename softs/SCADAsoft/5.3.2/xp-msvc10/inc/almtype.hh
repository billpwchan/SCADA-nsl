// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler v1.6a_p10 ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
// and
//       Institute for Software Integrated Systems
//       Vanderbilt University
//       Nashville, TN
//       USA
//       http://www.isis.vanderbilt.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html

// TAO_IDL - Generated from
// be\be_codegen.cpp:135

#ifndef _TAO_IDL_G__BIN_P530_SRC_SCS_IDL_ALMTYPE_H_
#define _TAO_IDL_G__BIN_P530_SRC_SCS_IDL_ALMTYPE_H_


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include "tao/AnyTypeCode/AnyTypeCode_methods.h"
#include "tao/ORB.h"
#include "tao/Basic_Types.h"
#include "tao/Sequence_T.h"
#include "tao/Seq_Var_T.h"
#include "tao/Seq_Out_T.h"
#include "tao/VarOut_T.h"
#include /**/ "tao/Versioned_Namespace.h"

#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO 

// TAO_IDL - Generated from
// be\be_type.cpp:269

struct PlinAin;

typedef
  TAO_Fixed_Var_T<
      PlinAin
    >
  PlinAin_var;

typedef
  PlinAin &
  PlinAin_out;

// TAO_IDL - Generated from
// d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_structure/structure_ch.cpp:57

struct  PlinAin
{
  typedef PlinAin_var _var_type;
  typedef PlinAin_out _out_type;
  
  static void _tao_any_destructor (void *);
  ::CORBA::Long plin;
  ::CORBA::Long ain;
};

// TAO_IDL - Generated from
// d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:49

extern  ::CORBA::TypeCode_ptr const _tc_PlinAin;

// TAO_IDL - Generated from
// d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_sequence/sequence_ch.cpp:107

#if !defined (_PLINAINLIST_CH_)
#define _PLINAINLIST_CH_

class PlinAinList;

typedef
  TAO_FixedSeq_Var_T<
      PlinAinList
    >
  PlinAinList_var;

typedef
  TAO_Seq_Out_T<
      PlinAinList
    >
  PlinAinList_out;

class  PlinAinList
  : public
      TAO::unbounded_value_sequence<
          PlinAin
        >
{
public:
  PlinAinList (void);
  PlinAinList ( ::CORBA::ULong max);
  PlinAinList (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      PlinAin* buffer, 
      ::CORBA::Boolean release = false
    );
  PlinAinList (const PlinAinList &);
  virtual ~PlinAinList (void);
  
  static void _tao_any_destructor (void *);
  
  typedef PlinAinList_var _var_type;
  typedef PlinAinList_out _out_type;
  
  
};

#endif /* end #if !defined */

// TAO_IDL - Generated from
// d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:49

extern  ::CORBA::TypeCode_ptr const _tc_PlinAinList;

// TAO_IDL - Generated from
// be\be_visitor_traits.cpp:64

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_structure/any_op_ch.cpp:53


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, const PlinAin &); // copying version
 void operator<<= (::CORBA::Any &, PlinAin*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, PlinAin *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const PlinAin *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_sequence/any_op_ch.cpp:53


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= ( ::CORBA::Any &, const PlinAinList &); // copying version
 void operator<<= ( ::CORBA::Any &, PlinAinList*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, PlinAinList *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const PlinAinList *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_structure/cdr_op_ch.cpp:54


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const PlinAin &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, PlinAin &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_sequence/cdr_op_ch.cpp:71

#if !defined _TAO_CDR_OP_PlinAinList_H_
#define _TAO_CDR_OP_PlinAinList_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



 ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const PlinAinList &_tao_sequence
  );
 ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    PlinAinList &_tao_sequence
  );
TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_PlinAinList_H_ */

// TAO_IDL - Generated from
// be\be_codegen.cpp:1228
#if defined (__ACE_INLINE__)
#include "almtype.inl"
#endif /* defined INLINE */

#endif /* ifndef */


