// ################################################################################
// #
// # File:        G:/bin/p530/src/asc2/idl\asc_soap_tie.hh (the SOAP TIE Header file)
// # Description: Harmonizes TIE implementation classes in a Multi-ORB environment
// #
// # This file has been generated by the SOAP generator on 06 Jun 2016.
// # Do not delete it or edit it since changes will be 
// # lost when next generation happens.
// #
// ################################################################################

#ifndef _SCS_ASC_SOAP_TIE_HH_
#define _SCS_ASC_SOAP_TIE_HH_

#include <asc_soap.hh>

template<class T_SOAP> class AscSOAP_TIE : public AscSOAP {

 public:

   // ctor
   AscSOAP_TIE(T_SOAP * objp) : AscSOAP(), m_obj(objp), m_rel(1) {
   }

   // dtor
   virtual ~AscSOAP_TIE() {
     if(m_rel) delete m_obj;
   }

   char * scs_implementation(void)
     throw(CORBA::SystemException) {
     return m_obj->scs_implementation();
   }
   char * scs_host(void)
     throw(CORBA::SystemException) {
     return m_obj->scs_host();
   }
   void   isAlive(void)
     throw(CORBA::SystemException) {
     m_obj->isAlive();
   }

   static AscIdl_ptr _narrow(CORBA::Object_ptr p) {
     return AscIdl::_narrow(p);
   }

   // IDL operations

   virtual void getState(String_out state)
     throw(CORBA::SystemException) {
     m_obj->getState(state);
   }

   virtual void setState(const char * state)
     throw(CORBA::SystemException) {
     m_obj->setState(state);
   }

   virtual void setTrace(CORBA::Long moduleMask, 
                         CORBA::Long levelMask)
     throw(CORBA::SystemException) {
     m_obj->setTrace(moduleMask, 
                     levelMask);
   }

   virtual void setTraceOutput(CORBA::Long mode, 
                               const char * output)
     throw(CORBA::SystemException) {
     m_obj->setTraceOutput(mode, 
                           output);
   }

   virtual void setUserTrace(CORBA::Long moduleMask, 
                             CORBA::Long levelMask)
     throw(CORBA::SystemException) {
     m_obj->setUserTrace(moduleMask, 
                         levelMask);
   }

   virtual void dump()
     throw(CORBA::SystemException) {
     m_obj->dump();
   }

   virtual ScsStatusIdl foregroundSnapshot(const char * path)
     throw(CORBA::SystemException) {
     return m_obj->foregroundSnapshot(path);
   }

   virtual ScsStatusIdl backgroundSnapshot(AscAgentIdl_ptr  myAgent, 
                                           const char * path)
     throw(CORBA::SystemException) {
     return m_obj->backgroundSnapshot(myAgent, 
                                      path);
   }

   virtual void snapshotCompleted(const ScsStatusIdl& snapshotStatus)
     throw(CORBA::SystemException) {
     m_obj->snapshotCompleted(snapshotStatus);
   }

   virtual void sendEvent(CORBA::Long addrIdPart1, 
                          CORBA::Long addrIdPart2, 
                          const char * scsAddress, 
                          const char * msg, 
                          const char * serverName)
     throw(CORBA::SystemException) {
     m_obj->sendEvent(addrIdPart1, 
                      addrIdPart2, 
                      scsAddress, 
                      msg, 
                      serverName);
   }

   virtual void sendAsyncEvent(CORBA::Long addrIdPart1, 
                               CORBA::Long addrIdPart2, 
                               const char * scsAddress, 
                               const char * msg, 
                               const char * serverName)
     throw(CORBA::SystemException) {
     m_obj->sendAsyncEvent(addrIdPart1, 
                           addrIdPart2, 
                           scsAddress, 
                           msg, 
                           serverName);
   }



 private:

   T_SOAP * m_obj;
   CORBA::Boolean m_rel;

   AscSOAP_TIE(const AscSOAP_TIE<T_SOAP>&){}
   void operator=(const AscSOAP_TIE<T_SOAP>&){}

};


#define DEF_TIE_SOAP_AscIdl(X)\
   typedef AscSOAP_TIE<X> AscSOAP_TIE##X;

#define TIE_SOAP_AscIdl(X) AscSOAP_TIE##X

#endif
