// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler v1.6a_p10 ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
// and
//       Institute for Software Integrated Systems
//       Vanderbilt University
//       Nashville, TN
//       USA
//       http://www.isis.vanderbilt.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html

// TAO_IDL - Generated from
// be\be_codegen.cpp:135

#ifndef _TAO_PIDL_COMPRESSION_COMPRESSIONC_H_
#define _TAO_PIDL_COMPRESSION_COMPRESSIONC_H_

#include /**/ "ace/pre.h"

#ifndef TAO_COMPRESSION_SAFE_INCLUDE
#error You should not include Compression/CompressionC.h, use tao/Compression/Compression.h
#endif /* TAO_COMPRESSION_SAFE_INCLUDE */

#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include /**/ "tao/Compression/compression_export.h"
#include "tao/SystemException.h"
#include "tao/UserException.h"
#include "tao/Basic_Types.h"
#include "tao/ORB_Constants.h"
#include "tao/Object.h"
#include "tao/Sequence_T.h"
#include "tao/Objref_VarOut_T.h"
#include "tao/Seq_Var_T.h"
#include "tao/Seq_Out_T.h"
#include "tao/VarOut_T.h"
#include /**/ "tao/Versioned_Namespace.h"

#include "tao/OctetSeqC.h"

#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO TAO_Compression_Export

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_module/module_ch.cpp:49

namespace Compression
{
  
  // TAO_IDL - Generated from
  // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_exception/exception_ch.cpp:53

#if !defined (_COMPRESSION_COMPRESSIONEXCEPTION_CH_)
#define _COMPRESSION_COMPRESSIONEXCEPTION_CH_
  
  class TAO_Compression_Export CompressionException : public ::CORBA::UserException
  {
  public:
    
    ::CORBA::ULong reason;
    CompressionException (void);
    CompressionException (const CompressionException &);
    ~CompressionException (void);

    CompressionException &operator= (const CompressionException &);
    
    static void _tao_any_destructor (void *);
    
    static CompressionException *_downcast ( ::CORBA::Exception *);
    static const CompressionException *_downcast ( ::CORBA::Exception const *);
    
    static ::CORBA::Exception *_alloc (void);
    
    virtual ::CORBA::Exception *_tao_duplicate (void) const;

    virtual void _raise (void) const;

    virtual void _tao_encode (TAO_OutputCDR &cdr) const;
    virtual void _tao_decode (TAO_InputCDR &cdr);
    
    
    // TAO_IDL - Generated from
    // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_exception/exception_ctor.cpp:66
    
    CompressionException (
        ::CORBA::ULong _tao_reason
      );
    
    virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_exception/exception_ch.cpp:53

#if !defined (_COMPRESSION_FACTORYALREADYREGISTERED_CH_)
#define _COMPRESSION_FACTORYALREADYREGISTERED_CH_
  
  class TAO_Compression_Export FactoryAlreadyRegistered : public ::CORBA::UserException
  {
  public:
    
    FactoryAlreadyRegistered (void);
    FactoryAlreadyRegistered (const FactoryAlreadyRegistered &);
    ~FactoryAlreadyRegistered (void);

    FactoryAlreadyRegistered &operator= (const FactoryAlreadyRegistered &);
    
    static void _tao_any_destructor (void *);
    
    static FactoryAlreadyRegistered *_downcast ( ::CORBA::Exception *);
    static const FactoryAlreadyRegistered *_downcast ( ::CORBA::Exception const *);
    
    static ::CORBA::Exception *_alloc (void);
    
    virtual ::CORBA::Exception *_tao_duplicate (void) const;

    virtual void _raise (void) const;

    virtual void _tao_encode (TAO_OutputCDR &cdr) const;
    virtual void _tao_decode (TAO_InputCDR &cdr);
    
    
    virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_exception/exception_ch.cpp:53

#if !defined (_COMPRESSION_UNKNOWNCOMPRESSORID_CH_)
#define _COMPRESSION_UNKNOWNCOMPRESSORID_CH_
  
  class TAO_Compression_Export UnknownCompressorId : public ::CORBA::UserException
  {
  public:
    
    UnknownCompressorId (void);
    UnknownCompressorId (const UnknownCompressorId &);
    ~UnknownCompressorId (void);

    UnknownCompressorId &operator= (const UnknownCompressorId &);
    
    static void _tao_any_destructor (void *);
    
    static UnknownCompressorId *_downcast ( ::CORBA::Exception *);
    static const UnknownCompressorId *_downcast ( ::CORBA::Exception const *);
    
    static ::CORBA::Exception *_alloc (void);
    
    virtual ::CORBA::Exception *_tao_duplicate (void) const;

    virtual void _raise (void) const;

    virtual void _tao_encode (TAO_OutputCDR &cdr) const;
    virtual void _tao_decode (TAO_InputCDR &cdr);
    
    
    virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_typedef/typedef_ch.cpp:379
  
  typedef ::CORBA::ULong CompressorId;
  typedef ::CORBA::ULong_out CompressorId_out;
  
  // TAO_IDL - Generated from
  // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_constant/constant_ch.cpp:52
  
  const Compression::CompressorId COMPRESSORID_NONE = 0U;
  
  // TAO_IDL - Generated from
  // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_constant/constant_ch.cpp:52
  
  const Compression::CompressorId COMPRESSORID_GZIP = 1U;
  
  // TAO_IDL - Generated from
  // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_constant/constant_ch.cpp:52
  
  const Compression::CompressorId COMPRESSORID_PKZIP = 2U;
  
  // TAO_IDL - Generated from
  // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_constant/constant_ch.cpp:52
  
  const Compression::CompressorId COMPRESSORID_BZIP2 = 3U;
  
  // TAO_IDL - Generated from
  // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_constant/constant_ch.cpp:52
  
  const Compression::CompressorId COMPRESSORID_ZLIB = 4U;
  
  // TAO_IDL - Generated from
  // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_constant/constant_ch.cpp:52
  
  const Compression::CompressorId COMPRESSORID_LZMA = 5U;
  
  // TAO_IDL - Generated from
  // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_constant/constant_ch.cpp:52
  
  const Compression::CompressorId COMPRESSORID_LZO = 6U;
  
  // TAO_IDL - Generated from
  // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_constant/constant_ch.cpp:52
  
  const Compression::CompressorId COMPRESSORID_RZIP = 7U;
  
  // TAO_IDL - Generated from
  // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_constant/constant_ch.cpp:52
  
  const Compression::CompressorId COMPRESSORID_7X = 8U;
  
  // TAO_IDL - Generated from
  // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_constant/constant_ch.cpp:52
  
  const Compression::CompressorId COMPRESSORID_XAR = 9U;
  
  // TAO_IDL - Generated from
  // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_sequence/sequence_ch.cpp:107

#if !defined (_COMPRESSION_COMPRESSORIDLIST_CH_)
#define _COMPRESSION_COMPRESSORIDLIST_CH_
  
  class CompressorIdList;
  
  typedef
    TAO_FixedSeq_Var_T<
        CompressorIdList
      >
    CompressorIdList_var;
  
  typedef
    TAO_Seq_Out_T<
        CompressorIdList
      >
    CompressorIdList_out;
  
  class TAO_Compression_Export CompressorIdList
    : public
        TAO::unbounded_value_sequence<
            CompressorId
          >
  {
  public:
    CompressorIdList (void);
    CompressorIdList ( ::CORBA::ULong max);
    CompressorIdList (
        ::CORBA::ULong max,
        ::CORBA::ULong length,
        ::CORBA::ULong* buffer, 
        ::CORBA::Boolean release = false
      );
    CompressorIdList (const CompressorIdList &);
    virtual ~CompressorIdList (void);
    
    static void _tao_any_destructor (void *);
    
    typedef CompressorIdList_var _var_type;
    typedef CompressorIdList_out _out_type;
    
    
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_typedef/typedef_ch.cpp:379
  
  typedef ::CORBA::ULong CompressionLevel;
  typedef ::CORBA::ULong_out CompressionLevel_out;
  
  // TAO_IDL - Generated from
  // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_typedef/typedef_ch.cpp:379
  
  typedef ::CORBA::Long CompressionRatio;
  typedef ::CORBA::Long_out CompressionRatio_out;
  
  // TAO_IDL - Generated from
  // be\be_interface.cpp:644

#if !defined (_COMPRESSION_COMPRESSORFACTORY__VAR_OUT_CH_)
#define _COMPRESSION_COMPRESSORFACTORY__VAR_OUT_CH_
  
  class CompressorFactory;
  typedef CompressorFactory *CompressorFactory_ptr;
  
  typedef
    TAO_Objref_Var_T<
        CompressorFactory
      >
    CompressorFactory_var;
  
  typedef
    TAO_Objref_Out_T<
        CompressorFactory
      >
    CompressorFactory_out;

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // be\be_type.cpp:269
  
  struct CompressorIdLevel;
  
  typedef
    TAO_Fixed_Var_T<
        CompressorIdLevel
      >
    CompressorIdLevel_var;
  
  typedef
    CompressorIdLevel &
    CompressorIdLevel_out;
  
  // TAO_IDL - Generated from
  // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_structure/structure_ch.cpp:57
  
  struct TAO_Compression_Export CompressorIdLevel
  {
    typedef CompressorIdLevel_var _var_type;
    typedef CompressorIdLevel_out _out_type;
    
    static void _tao_any_destructor (void *);
    Compression::CompressorId compressor_id;
    Compression::CompressionLevel compression_level;
  };
  
  // TAO_IDL - Generated from
  // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_sequence/sequence_ch.cpp:107

#if !defined (_COMPRESSION_COMPRESSORIDLEVELLIST_CH_)
#define _COMPRESSION_COMPRESSORIDLEVELLIST_CH_
  
  class CompressorIdLevelList;
  
  typedef
    TAO_FixedSeq_Var_T<
        CompressorIdLevelList
      >
    CompressorIdLevelList_var;
  
  typedef
    TAO_Seq_Out_T<
        CompressorIdLevelList
      >
    CompressorIdLevelList_out;
  
  class TAO_Compression_Export CompressorIdLevelList
    : public
        TAO::unbounded_value_sequence<
            CompressorIdLevel
          >
  {
  public:
    CompressorIdLevelList (void);
    CompressorIdLevelList ( ::CORBA::ULong max);
    CompressorIdLevelList (
        ::CORBA::ULong max,
        ::CORBA::ULong length,
        CompressorIdLevel* buffer, 
        ::CORBA::Boolean release = false
      );
    CompressorIdLevelList (const CompressorIdLevelList &);
    virtual ~CompressorIdLevelList (void);
    
    static void _tao_any_destructor (void *);
    
    typedef CompressorIdLevelList_var _var_type;
    typedef CompressorIdLevelList_out _out_type;
    
    
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_typedef/typedef_ch.cpp:472
  
  typedef CORBA::OctetSeq Buffer;
  typedef CORBA::OctetSeq_var Buffer_var;
  typedef CORBA::OctetSeq_out Buffer_out;
  
  // TAO_IDL - Generated from
  // be\be_interface.cpp:644

#if !defined (_COMPRESSION_COMPRESSOR__VAR_OUT_CH_)
#define _COMPRESSION_COMPRESSOR__VAR_OUT_CH_
  
  class Compressor;
  typedef Compressor *Compressor_ptr;
  
  typedef
    TAO_Objref_Var_T<
        Compressor
      >
    Compressor_var;
  
  typedef
    TAO_Objref_Out_T<
        Compressor
      >
    Compressor_out;

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:54

#if !defined (_COMPRESSION_COMPRESSOR_CH_)
#define _COMPRESSION_COMPRESSOR_CH_
  
  class TAO_Compression_Export Compressor
    : public virtual ::CORBA::Object
  {
  public:
    typedef Compressor_ptr _ptr_type;
    typedef Compressor_var _var_type;
    typedef Compressor_out _out_type;
    
    // The static operations.
    static Compressor_ptr _duplicate (Compressor_ptr obj);
    
    static void _tao_release (Compressor_ptr obj);
    
    static Compressor_ptr _narrow (::CORBA::Object_ptr obj);
    static Compressor_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static Compressor_ptr _nil (void)
    {
      return static_cast<Compressor_ptr> (0);
    }
    
    
    
    // TAO_IDL - Generated from
    // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/operation_ch.cpp:46
    
    virtual void compress (
        const ::Compression::Buffer & source,
        ::Compression::Buffer & target) = 0;
    
    // TAO_IDL - Generated from
    // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/operation_ch.cpp:46
    
    virtual void decompress (
        const ::Compression::Buffer & source,
        ::Compression::Buffer & target) = 0;
    
    // TAO_IDL - Generated from
    // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/operation_ch.cpp:46
    
    virtual ::Compression::CompressorFactory_ptr compressor_factory (
        void) = 0;
    
    // TAO_IDL - Generated from
    // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/operation_ch.cpp:46
    
    virtual ::Compression::CompressionLevel compression_level (
        void) = 0;
    
    // TAO_IDL - Generated from
    // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/operation_ch.cpp:46
    
    virtual ::CORBA::ULongLong compressed_bytes (
        void) = 0;
    
    // TAO_IDL - Generated from
    // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/operation_ch.cpp:46
    
    virtual ::CORBA::ULongLong uncompressed_bytes (
        void) = 0;
    
    // TAO_IDL - Generated from
    // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/operation_ch.cpp:46
    
    virtual ::Compression::CompressionRatio compression_ratio (
        void) = 0;
    
    // TAO_IDL - Generated from
    // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:216
    
    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Abstract or local interface only.
    Compressor (void);
    
    virtual ~Compressor (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    Compressor (const Compressor &);
    
    void operator= (const Compressor &);
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:54

#if !defined (_COMPRESSION_COMPRESSORFACTORY_CH_)
#define _COMPRESSION_COMPRESSORFACTORY_CH_
  
  class TAO_Compression_Export CompressorFactory
    : public virtual ::CORBA::Object
  {
  public:
    typedef CompressorFactory_ptr _ptr_type;
    typedef CompressorFactory_var _var_type;
    typedef CompressorFactory_out _out_type;
    
    // The static operations.
    static CompressorFactory_ptr _duplicate (CompressorFactory_ptr obj);
    
    static void _tao_release (CompressorFactory_ptr obj);
    
    static CompressorFactory_ptr _narrow (::CORBA::Object_ptr obj);
    static CompressorFactory_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static CompressorFactory_ptr _nil (void)
    {
      return static_cast<CompressorFactory_ptr> (0);
    }
    
    
    
    // TAO_IDL - Generated from
    // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/operation_ch.cpp:46
    
    virtual ::Compression::CompressorId compressor_id (
        void) = 0;
    
    // TAO_IDL - Generated from
    // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/operation_ch.cpp:46
    
    virtual ::Compression::Compressor_ptr get_compressor (
        ::Compression::CompressionLevel compression_level) = 0;
    
    // TAO_IDL - Generated from
    // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:216
    
    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Abstract or local interface only.
    CompressorFactory (void);
    
    virtual ~CompressorFactory (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    CompressorFactory (const CompressorFactory &);
    
    void operator= (const CompressorFactory &);
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_sequence/sequence_ch.cpp:107

#if !defined (_COMPRESSION_COMPRESSORFACTORYSEQ_CH_)
#define _COMPRESSION_COMPRESSORFACTORYSEQ_CH_
  
  class CompressorFactorySeq;
  
  typedef
    TAO_VarSeq_Var_T<
        CompressorFactorySeq
      >
    CompressorFactorySeq_var;
  
  typedef
    TAO_Seq_Out_T<
        CompressorFactorySeq
      >
    CompressorFactorySeq_out;
  
  class TAO_Compression_Export CompressorFactorySeq
    : public
        TAO::unbounded_object_reference_sequence<
            CompressorFactory,
            CompressorFactory_var
          >
  {
  public:
    CompressorFactorySeq (void);
    CompressorFactorySeq ( ::CORBA::ULong max);
    CompressorFactorySeq (
        ::CORBA::ULong max,
        ::CORBA::ULong length,
        CompressorFactory_ptr* buffer, 
        ::CORBA::Boolean release = false
      );
    CompressorFactorySeq (const CompressorFactorySeq &);
    virtual ~CompressorFactorySeq (void);
    
    static void _tao_any_destructor (void *);
    
    typedef CompressorFactorySeq_var _var_type;
    typedef CompressorFactorySeq_out _out_type;
    
    
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // be\be_interface.cpp:644

#if !defined (_COMPRESSION_COMPRESSIONMANAGER__VAR_OUT_CH_)
#define _COMPRESSION_COMPRESSIONMANAGER__VAR_OUT_CH_
  
  class CompressionManager;
  typedef CompressionManager *CompressionManager_ptr;
  
  typedef
    TAO_Objref_Var_T<
        CompressionManager
      >
    CompressionManager_var;
  
  typedef
    TAO_Objref_Out_T<
        CompressionManager
      >
    CompressionManager_out;

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:54

#if !defined (_COMPRESSION_COMPRESSIONMANAGER_CH_)
#define _COMPRESSION_COMPRESSIONMANAGER_CH_
  
  class TAO_Compression_Export CompressionManager
    : public virtual ::CORBA::Object
  {
  public:
    typedef CompressionManager_ptr _ptr_type;
    typedef CompressionManager_var _var_type;
    typedef CompressionManager_out _out_type;
    
    // The static operations.
    static CompressionManager_ptr _duplicate (CompressionManager_ptr obj);
    
    static void _tao_release (CompressionManager_ptr obj);
    
    static CompressionManager_ptr _narrow (::CORBA::Object_ptr obj);
    static CompressionManager_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static CompressionManager_ptr _nil (void)
    {
      return static_cast<CompressionManager_ptr> (0);
    }
    
    
    
    // TAO_IDL - Generated from
    // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/operation_ch.cpp:46
    
    virtual void register_factory (
        ::Compression::CompressorFactory_ptr compressor_factory) = 0;
    
    // TAO_IDL - Generated from
    // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/operation_ch.cpp:46
    
    virtual void unregister_factory (
        ::Compression::CompressorId compressor_id) = 0;
    
    // TAO_IDL - Generated from
    // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/operation_ch.cpp:46
    
    virtual ::Compression::CompressorFactory_ptr get_factory (
        ::Compression::CompressorId compressor_id) = 0;
    
    // TAO_IDL - Generated from
    // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/operation_ch.cpp:46
    
    virtual ::Compression::Compressor_ptr get_compressor (
        ::Compression::CompressorId compressor_id,
        ::Compression::CompressionLevel compression_level) = 0;
    
    // TAO_IDL - Generated from
    // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_operation/operation_ch.cpp:46
    
    virtual ::Compression::CompressorFactorySeq * get_factories (
        void) = 0;
    
    // TAO_IDL - Generated from
    // d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:216
    
    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Abstract or local interface only.
    CompressionManager (void);
    
    virtual ~CompressionManager (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    CompressionManager (const CompressionManager &);
    
    void operator= (const CompressionManager &);
  };

#endif /* end #if !defined */

// TAO_IDL - Generated from
// d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_module/module_ch.cpp:78

} // module Compression

// TAO_IDL - Generated from
// be\be_visitor_traits.cpp:64


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{

#if !defined (_COMPRESSION_COMPRESSOR__TRAITS_)
#define _COMPRESSION_COMPRESSOR__TRAITS_
  
  template<>
  struct TAO_Compression_Export Objref_Traits< ::Compression::Compressor>
  {
    static ::Compression::Compressor_ptr duplicate (
        ::Compression::Compressor_ptr p
      );
    static void release (
        ::Compression::Compressor_ptr p
      );
    static ::Compression::Compressor_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::Compression::Compressor_ptr p,
        TAO_OutputCDR & cdr
      );
  };

#endif /* end #if !defined */

#if !defined (_COMPRESSION_COMPRESSORFACTORY__TRAITS_)
#define _COMPRESSION_COMPRESSORFACTORY__TRAITS_
  
  template<>
  struct TAO_Compression_Export Objref_Traits< ::Compression::CompressorFactory>
  {
    static ::Compression::CompressorFactory_ptr duplicate (
        ::Compression::CompressorFactory_ptr p
      );
    static void release (
        ::Compression::CompressorFactory_ptr p
      );
    static ::Compression::CompressorFactory_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::Compression::CompressorFactory_ptr p,
        TAO_OutputCDR & cdr
      );
  };

#endif /* end #if !defined */

#if !defined (_COMPRESSION_COMPRESSIONMANAGER__TRAITS_)
#define _COMPRESSION_COMPRESSIONMANAGER__TRAITS_
  
  template<>
  struct TAO_Compression_Export Objref_Traits< ::Compression::CompressionManager>
  {
    static ::Compression::CompressionManager_ptr duplicate (
        ::Compression::CompressionManager_ptr p
      );
    static void release (
        ::Compression::CompressionManager_ptr p
      );
    static ::Compression::CompressionManager_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::Compression::CompressionManager_ptr p,
        TAO_OutputCDR & cdr
      );
  };

#endif /* end #if !defined */
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_exception/cdr_op_ch.cpp:52

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Compression_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Compression::CompressionException &);
TAO_Compression_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Compression::CompressionException &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_exception/cdr_op_ch.cpp:52

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Compression_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Compression::FactoryAlreadyRegistered &);
TAO_Compression_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Compression::FactoryAlreadyRegistered &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_exception/cdr_op_ch.cpp:52

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Compression_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Compression::UnknownCompressorId &);
TAO_Compression_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Compression::UnknownCompressorId &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_sequence/cdr_op_ch.cpp:71

#if !defined _TAO_CDR_OP_Compression_CompressorIdList_H_
#define _TAO_CDR_OP_Compression_CompressorIdList_H_

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Compression_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Compression::CompressorIdList &_tao_sequence
  );
TAO_Compression_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Compression::CompressorIdList &_tao_sequence
  );
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif /* _TAO_CDR_OP_Compression_CompressorIdList_H_ */

// TAO_IDL - Generated from
// d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_structure/cdr_op_ch.cpp:54



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Compression_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Compression::CompressorIdLevel &);
TAO_Compression_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Compression::CompressorIdLevel &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// d:\softs\ace_wrappers_vc10\tao\tao_idl\be\be_visitor_sequence/cdr_op_ch.cpp:71

#if !defined _TAO_CDR_OP_Compression_CompressorIdLevelList_H_
#define _TAO_CDR_OP_Compression_CompressorIdLevelList_H_

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Compression_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Compression::CompressorIdLevelList &_tao_sequence
  );
TAO_Compression_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Compression::CompressorIdLevelList &_tao_sequence
  );
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif /* _TAO_CDR_OP_Compression_CompressorIdLevelList_H_ */

// TAO_IDL - Generated from
// be\be_codegen.cpp:1228


TAO_END_VERSIONED_NAMESPACE_DECL

#include /**/ "ace/post.h"

#endif /* ifndef */


