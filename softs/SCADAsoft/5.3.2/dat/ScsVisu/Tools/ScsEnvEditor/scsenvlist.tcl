global SEL_Filename
set    SEL_Filename ""

global ListEnvs
set    ListEnvs {}


#####################################################################
# Read the EnvList and fill a TCL list with the information.
#####################################################################
proc ReadEnvList { pFileName } {
    global ListEnvs
    set ListEnvs {}

    set fileId [open $pFileName r]

    while { [gets $fileId line] !=-1 } {
        if { [string compare $line ""] == 0 } {
            # skip the empty lines
            continue
        }
        
        if { [string index $line 0] == "#" } {
            # skip the comments
            continue
        }

        set words [split $line ":"]
        
        if { [llength $words] == 2 } {
            set LogEnv [string trim [lindex $words 0]]
            set PhysEnv [string trim [lindex $words 1]]
            
            # see if there is several physical environments
            set PhysEnvList [split $PhysEnv ","]
            if { [llength $PhysEnvList] == 0} {
                lappend ListEnvs [subst {$LogEnv {$PhysEnv}}]
            } else {
                set NewPhysEnvList {}
                for {set i 0} { $i < [llength $PhysEnvList]} {incr i} {
                    set trim_string [string trim [lindex $PhysEnvList $i]]
                    lappend NewPhysEnvList [subst {$trim_string}]
                }
                lappend ListEnvs [subst {{$LogEnv} {$NewPhysEnvList}}]
            }
            
#            puts "LogEnv = ($LogEnv), PhysEnv=($PhysEnv)"
        }
    }
    close $fileId
    
#    puts "ListEnvs=($ListEnvs)"
}

#####################################################################
# Print the TCL list containing Envs.
#####################################################################
proc PrintEnvList {} {
    global ListEnvs

    set count [llength $ListEnvs]
    puts "Number of valid environnements = $count"
    
    for {set i 0} {$i < $count } {incr i} {
        set LogEnv          [lindex [lindex $ListEnvs $i] 0]
        set PhysEnvList     [lindex [lindex $ListEnvs $i] 1]
        puts -nonewline "$LogEnv: "
        for {set j 0} {$j<[llength $PhysEnvList]} {incr j} {
            if {[llength $PhysEnvList] == 1 || $j == [expr [llength $PhysEnvList] - 1]} {
                puts -nonewline "[lindex $PhysEnvList $j]"
            } else {
                puts -nonewline "[lindex $PhysEnvList $j],"
            }
        }
        puts ""
    }
}

#####################################################################
# Write the TCL list containing Envs into a file (in parameter).
#####################################################################
proc WriteEnvList { pFileName } {
    global ListEnvs
    
    set fileId    [open $pFileName w]
	set timestamp [clock format [clock seconds] -format "%d/%m/%Y %H:%M:%S"]

    puts $fileId "##################################################################################"
    puts $fileId "# This 'ScsEnvList' was generated by SCADAsoft"
    puts $fileId "# File generated on $timestamp from [info hostname] ($::tcl_platform(os) $::tcl_platform(osVersion))"
    puts $fileId "##################################################################################"
    puts $fileId "# Table of defined environments:"
    puts $fileId "#   Logical_env: Physical_env1\[name1\], Physical_env2\[name2\], ..."
    puts $fileId "##################################################################################"
    puts $fileId "\n"

    set count [llength $ListEnvs]
#    for {set i 0} {$i < $count } {incr i} {
#        puts $fileId "[lindex [lindex $ListEnvs $i] 0]:[lindex [lindex $ListEnvs $i] 1]"
#    }

    for {set i 0} {$i < $count } {incr i} {
        set LogEnv          [lindex [lindex $ListEnvs $i] 0]
        set PhysEnvList     [lindex [lindex $ListEnvs $i] 1]
        puts -nonewline $fileId "$LogEnv: "
        for {set j 0} {$j<[llength $PhysEnvList]} {incr j} {
            if {[llength $PhysEnvList] == 1 || $j == [expr [llength $PhysEnvList] - 1]} {
                puts -nonewline $fileId "[lindex $PhysEnvList $j]"
            } else {
                puts -nonewline $fileId "[lindex $PhysEnvList $j],"
            }
        }
        puts $fileId ""
    }

    close $fileId
}
